<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://harriswilde.github.io</id>
    <title>TechZone</title>
    <updated>2020-01-01T13:14:28.647Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://harriswilde.github.io"/>
    <link rel="self" href="https://harriswilde.github.io/atom.xml"/>
    <subtitle>HarrisWilde祝诸君元旦快乐🎉</subtitle>
    <logo>https://harriswilde.github.io/images/avatar.png</logo>
    <icon>https://harriswilde.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, TechZone</rights>
    <entry>
        <title type="html"><![CDATA[Python的安装以及环境配置]]></title>
        <id>https://harriswilde.github.io/post/PythonInstall</id>
        <link href="https://harriswilde.github.io/post/PythonInstall">
        </link>
        <updated>2020-01-09T02:54:02.000Z</updated>
        <content type="html"><![CDATA[<p>在学习Python之前，我们需要安装Python才能够进行程序的编写。在这里，笔者就拿Python的官方发行版本来进行说明。对于早期的学习来说，官方的IDLE基本可以满足，如果真的要走上Python开发，或者是想要获得更高级的体验的话，后期可以自己尝试安装PyCharm、Visual Studio之类的IDE。</p>
<p>废话不多说，咱们开始。</p>
<hr>
<h1 id="windows环境">Windows环境</h1>
<h2 id="下载安装">下载安装</h2>
<p>Windows应该是咱们小伙伴最常用的一个系统了，应该对这个比较熟悉。那么其实直接去官网：<a href="https://www.python.org/downloads/">点我直达</a></p>
<p>在里面找到你想要下载的版本（如果你不知道你想要下载什么版本，那就下载<strong>最新</strong>的版本），点进去之后，翻到页面最底部，就可以看到所有的发行版文件。找到适用于Win的，然后找到后缀是<code>executable installer</code>的文件下载。如果你是<strong>64位</strong>的系统，那就找到含有<code>X86-64</code>关键字的文件下载，如果是<strong>32位</strong>就找<code>X86</code>。</p>
<p>下载好了之后应该是一个exe文件，双击安装即可。</p>
<p>安装完成了之后，在开始菜单里面，找到Python文件夹，如果能够看到Python IDLE并且能够正常打开的话，那么就说明安装成功了，接下来就要进行环境配置。</p>
<h2 id="环境配置">环境配置</h2>
<p>虽然现在你已经可以开始写程序了，但是我们还是把环境变量先配置一下，方便以后安装拓展等等。</p>
<p>这里以Windows10为例，其他的操作系统也大同小异。</p>
<ol>
<li>右键此电脑，打开<code>属性</code><br>
<img src="https://s2.ax1x.com/2019/12/31/l1mAk8.png" alt="" loading="lazy"></li>
<li>选择<code>高级系统设置</code><br>
<img src="https://s2.ax1x.com/2019/12/31/l1mw0x.png" alt="" loading="lazy"></li>
<li>点击<code>高级</code>选项卡，进入<code>环境变量</code><br>
<img src="https://s2.ax1x.com/2019/12/31/l1mbcj.png" alt="" loading="lazy"></li>
<li>点击<code>Path</code>，<code>编辑</code><br>
<img src="https://s2.ax1x.com/2019/12/31/l1nzqI.png" alt="" loading="lazy"></li>
<li>点击<code>新建</code><br>
<img src="https://s2.ax1x.com/2019/12/31/l1uii8.png" alt="" loading="lazy"></li>
<li>找到你的Python安装的路径，将它和它的<code>Scripts</code>子目录也添加进去，像下面这样<br>
<img src="https://s2.ax1x.com/2019/12/31/l1u9dP.png" alt="" loading="lazy"><br>
添加完成，确定了之后，运行<code>cmd</code>，输入<code>Python</code>，如果出来的是这样的：</li>
</ol>
<pre><code>Microsoft Windows [Version 10.0.18363.535]
(c) 2019 Microsoft Corporation. All rights reserved.

C:\Users\Harris Wilde&gt;Python
Python 3.7.5 (tags/v3.7.5:5c02a39a0b, Oct 15 2019, 00:11:34) [MSC v.1916 64 bit (AMD64)] on win32
Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.
&gt;&gt;&gt;_
</code></pre>
<p>那么恭喜你，你已经成功了！</p>
<p>如果是这样的：</p>
<pre><code>Microsoft Windows [Version 10.0.18363.535]
(c) 2019 Microsoft Corporation. All rights reserved.

C:\Users\Harris Wilde&gt;Python
'Python' is not recognized as an internal or external command,
operable program or batch file.
</code></pre>
<p>那么你可能中间有些步骤不对，回去再好好检查下吧。</p>
<hr>
<h1 id="linux和unix">Linux和Unix</h1>
<p>绝大部分的Linux和Unix系统（包括MacOS）都是内置Python解释器的，你只需要打开终端提示符，输入以下命令：</p>
<pre><code>$ python
</code></pre>
<p>这会启动Python交互解释器，同时也应该有下面这样的输出：</p>
<pre><code>Python 2.5.1 (r251:54869, Apr 18 2007, 22:08:04)
[GCC 4.0.1 (Apple Computer, Inc . build 5367)] on darwin
Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.
&gt;&gt;&gt;▮
</code></pre>
<p>如果没有安装的话，可能会得到下面的错误：</p>
<pre><code>bash: python: command not found
</code></pre>
<p>那么，你就要自己安装了。</p>
<h2 id="使用包管理器">使用包管理器</h2>
<p>Linux系统家族存在多种包管理系他和安装机制。如果你使用的是Linux是有某种某种形式的包管理系统，那么你可以通过它很轻松地安装Python。</p>
<blockquote>
<p>注意，在Linux中使用包管理安装器安装Python的时候可能需要具备系统管理员（root账户）权限。</p>
</blockquote>
<p>例如，如果使用的操作系统位Debian Linux，那么可以使用下面的命令来安装Python：</p>
<pre><code>$ apt-get install python
</code></pre>
<p>如果是Gentoo Linux，则可以使用：</p>
<pre><code>$ emerge python
</code></pre>
<blockquote>
<p>许多包管理器都有自动下载的功能，包括Yum、Synaptic（Unbuntu Linux专有的包管理器）以及其他Debian样式的管理器。你能够通过这些管理器获得Python的最新版本。</p>
</blockquote>
<h2 id="从源文件编译">从源文件编译</h2>
<p>如果你没有包管理器，或者不想用的话，也可以尝试自己编译Python。当然也有可能是你没有管理员权限，这个方法也适用，十分灵活。你可以在<strong>任何位置</strong>安装Python，甚至可以安装在用户的主目录都是没问题的。那么接下来就来开始：</p>
<ol>
<li>访问官网的下载页：<a href="https://www.python.org/downloads/">点我直达</a></li>
<li>按照说明下载源代码</li>
<li>下载拓展名为<code>.tgz</code>的文件，将其保存在临时的位置。假设你想将Python安装在自己的主目录，那么可以将它放置在类似于<code>~/python</code>的目录中。进入这个目录（比如使用<code>cd ~/python</code>命令）。</li>
<li>使用<code>tar -xzvf Python-3.7.tgz</code>(3.7是版本号)解压缩文件。如果使用的tar版本不支持<code>z</code>选项，那么可以先使用gunzip进行解压，然后再使用<code>tar -xvf</code>命令。如果解压缩的过程中出错，那你就试试重新下载，因为下载的时候也有可能会出错。</li>
<li>进入解压好的文件夹：<pre><code>$ cd Python-3.7
</code></pre>
执行下面的命令：<pre><code>./configue --perfix=$(pwd)
make
make install
</code></pre>
最后应该可以再当前文件夹内找到一个名为python的可执行文件（如果上面的步骤无效的话，那就看看包含在发布版中的README文件）。将当前文件夹的路径包含在环境变量PATH中，这样安装就大功告成了！<br>
如果要看看其他的配置命令，那么就使用以下的命令：<pre><code>./configue --help
</code></pre>
</li>
</ol>
<hr>
<h1 id="macos">MacOS</h1>
<p>MacOS是有自带的Python解释器的。你只需要打开终端，输入python命令就可以运行。即使打算安装更新的版本，也应该保留这个默认的安装，因为操作系统需要用到它。读者可以使用<a href="http://macports.org">MacPorts</a>或者<a href="http://finkproject.org">Fink</a>进行安装，或者按照以下的步骤从Python官网获取最新的版本。</p>
<ol>
<li>访问官网下载：<a href="https://www.python.org/downloads/">点我直达</a></li>
<li>点击MacOS Installer的链接，应该会跳转到MacPython的下载页面，上面会有更多的信息。MacPython页面也有针对旧版MacOS的Python。</li>
<li>下载了<code>.dmg</code>安装文件之后，它有可能会自动挂载。如果没有，双击该文件。已经挂载的磁盘映像中，可以找到安装包文件<code>.mpkg</code>。如果双击该文件，，就会打开安装向导，引领你完成安装的步骤。</li>
</ol>
<hr>
<p>安装完成了之后，你可以使用命令或者Win下打开IDLE，输入</p>
<pre><code class="language-python">print(&quot;Hello, world!&quot;)
</code></pre>
<p>应该解释器就会给你打招呼啦：</p>
<pre><code>Python 3.7.5 (tags/v3.7.5:5c02a39a0b, Oct 15 2019, 00:11:34) [MSC v.1916 64 bit (AMD64)] on win32
Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license()&quot; for more information.
&gt;&gt;&gt; print(&quot;Hello, world!&quot;)
Hello, world!
&gt;&gt;&gt; _
</code></pre>
<p>那么这时候，你也可以试着输入其他的指令看看：</p>
<pre><code>&gt;&gt;&gt; 你好吗？
SyntaxError: invalid character in identifier
&gt;&gt;&gt; _
</code></pre>
<p>这是因为你还不会和解释器进行交流，自然它就听不懂你在说什么了。</p>
<p>不过要是不会交流，还是挺没意思的吧？</p>
<p>如果你已经看到了这里，那么今天的基础工作应该做的差不多了，那咱们就开始吧。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python学习开场白]]></title>
        <id>https://harriswilde.github.io/post/PythonBeginner</id>
        <link href="https://harriswilde.github.io/post/PythonBeginner">
        </link>
        <updated>2019-12-31T15:02:06.000Z</updated>
        <content type="html"><![CDATA[<p>在2019年的最后一天，写一篇小短文来正式开启我的Python学习的版面。</p>
<p>Python语言，用我的话来说，就是通识语言。基本上只要你会一点点英语，那么这门语言对于你来说，就毫无难度。语法几乎就是英语，你甚至不需要知道那些艰深晦涩的原理，就可以快速地达到你想达到的目的。无论你是文科还是理科，无论你是否有计算机基础，你都可以学习这门语言。我甚至有一种预感，这门语言未来将不再是程序员们的专属，可能会成为一门普适性的语言，现在已经有这种趋势了。</p>
<p>当然，Python也有许多令人诟病的地方，比如版本更新兼容性差，性能低，函数语法太过冗杂等等。咱们就来避重就轻，感受一下这门语言的魅力。</p>
<p>Python和大数据、人工智能、机器学习等名词连起来出现已经见怪不怪了，还是那句话，你不需要很专业，也不需要很痛苦，静下心来学习，你会发现，编程已经成为了一种享受，就像和计算机对话一样。</p>
<p>但是，如果你是计算机类专业的学生，或者打算从事这方面的工作，就千万别局限于Python，也别听那些什么机构吹的东西，Python虽然简单，但是用Python来解决的问题往往不简单，过硬的实力是必不可少的。</p>
<p>最后，祝诸君鼠年大吉，学业有成、事业攀升！</p>
<pre><code class="language-python">print(&quot;新年快乐！&quot;)
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[C语言之数组]]></title>
        <id>https://harriswilde.github.io/post/CArray</id>
        <link href="https://harriswilde.github.io/post/CArray">
        </link>
        <updated>2019-12-07T15:29:32.000Z</updated>
        <content type="html"><![CDATA[<p>学完了前面几种基础语法之后，你可能会渐渐发现，现有的数据的记录方式，已经无法很好地解决我们接下来要解决的问题。比如有一天，老师找你计算一下全班同学的平均成绩。那么你就会开始思考如何存储全班的成绩。按照之前学习的知识，我们可以定义<code>a1</code> <code>a2</code> <code>a3</code> <code>……</code>。但是，这样未免也太麻烦了，如果要记录全省人民的身高数据呢？如果下个学期班里学生人数有变化呢？</p>
<p>你会发现，种种原因，导致了我们编写的程序很繁杂，不够灵活。那么这样，编程也就没有太大的必要了。好在，C语言提供了一种存储数据的方式，叫做<strong>数组</strong>。</p>
<hr>
<p>数组，就是存放一堆<strong>同类型</strong>的数据的容器。比如刚刚的例子，我们要存储学生的成绩，这时候数组就可以大显神威了。</p>
<h1 id="定义一维数组">定义一维数组</h1>
<p>定义一维数组的方法很简单，只需要指定元素的类型和存放的数量即可。</p>
<p><code>类型 数组名[元素个数]</code></p>
<p>比如：</p>
<pre><code class="language-c">int Score1[50];//定义一个叫Score1的整型数组，有50个元素
float Score2[30];//定义一个叫Score2的浮点型数组，有30个元素
double Score3[20];//定义一个叫Score3的双精度浮点型数组，有20个元素
char Str[10];//定义一个叫Str的字符型数组，有10个元素
</code></pre>
<p>数组一旦被定义，在其生命周期内，就<strong>不可能被改变</strong>(其实是在内存中开辟了一段连续的空间了)。</p>
<h1 id="访问数组">访问数组</h1>
<p>访问数组的方法和定义有点类似，但是如果混淆了的话，那可就不是什么好事了。</p>
<p><code>数组名[下标]</code></p>
<p>方括号里面的，实际上是指的数组的<strong>下标</strong>，也可以叫<strong>索引</strong>。需要注意的是，下标的计数是从<code>0</code>开始的，最大的下标是<code>(元素个数-1)</code>。也就是说，如果我<code>int Score[10]</code>之后，那么我想访问第一个元素，就是这样<code>Score[0]</code>，如果要访问最后一个元素，就是<code>Score[9]</code>。</p>
<p>之前看到过一个段子，大概意思是说程序员数数都喜欢从0开始数。如果你是刚刚接触编程，那么你也要开始习惯从0开始计数的这种思路。</p>
<p>其实，并不是C语言才开始有数组，FORTRAN语言就有数组了。但是下标从0开始计数这种方式，是从C语言才开始有的。当时开发C语言编译器的人们就想让编译器能够更加简单，如果从0开始，那么编译器实际上能够少做很多事情，于是就多了这么一个设定。随着计算机科学的发展，后面出现的优秀的语言也越来越多。但是我们所说的&quot;C-Like”语言，也就是参照C语言来开发的语言，也都继承了C语言这一“优良传统”，因此就有了程序员数数是从0开始的这么一种说法。</p>
<p>讲到这里，想必大家也就会明白之前为什么我们在循环的时候，初始值都是设定为0的了。像这样：</p>
<pre><code class="language-c">for (i = 0; i &lt; 10; i++)
{
    ...
}
</code></pre>
<p>而不是像这样写(当然也没错)：</p>
<pre><code class="language-c">for (i = 1; i &lt;= 10; i++)
{
    ...
}
</code></pre>
<p>这就是因为，我们在使用循环的时候，经常会配合数组一起来使用，那么我们循环设置成和数组下标的计数方法一样，有利于我们使用数组。</p>
<p>还是回到我们最初的那个问题，存储班里面学生的成绩，然后计算出平均值：</p>
<pre><code class="language-c">//Example 01
#include &lt;stdio.h&gt;
int main(void)
{
    int s[10];//假定我们班上有10个人
    int i;
    double sum = 0;
    for (i = 0; i &lt; 10; i++)
    {
        printf(&quot;请输入第 %d 位同学的成绩：&quot;, i + 1);
            scanf(&quot;%d&quot;, &amp;s[i]);
        sum += s[i];
    }
    printf(&quot;成绩录入完毕，该次考试的平均分是：%.2f\n&quot;, sum/10);
    return 0;
}
</code></pre>
<p>程序实现如下：</p>
<pre><code>//Consequence 01
请输入第 1 位同学的成绩：80
请输入第 2 位同学的成绩：90
请输入第 3 位同学的成绩：70
请输入第 4 位同学的成绩：66
请输入第 5 位同学的成绩：77
请输入第 6 位同学的成绩：54
请输入第 7 位同学的成绩：67
请输入第 8 位同学的成绩：86
请输入第 9 位同学的成绩：78
请输入第 10 位同学的成绩：65
成绩录入完毕，该次考试的平均分是：73.30
</code></pre>
<h1 id="数组的初始化">数组的初始化</h1>
<p>在定义数组的时候同时对其<strong>各个元素</strong>进行赋值，称为数组的初始化。在刚刚的代码中，我们定义了数组，但却没有在定义的时候就初始化，而是在循环中进行赋值。那么初始化数组一般有下面几种方法：</p>
<ol>
<li>
<p>将数组中所有的元素初始化为0，可以这么写：</p>
<pre><code class="language-c">int a[10] = {0};
</code></pre>
</li>
<li>
<p>如果要赋予不同的值，用逗号分开即可：</p>
<pre><code class="language-c">int a[5] = {1, 2, 3, 4, 5};
</code></pre>
</li>
<li>
<p>给部分元素赋值，剩下的自动初始化为0：</p>
<pre><code class="language-c">int a[10] = {1, 2 ,3};//剩下的全部为0
</code></pre>
</li>
<li>
<p>也可以偷懒只给出每个元素的值，让编译器自己判断数组长度：</p>
<pre><code class="language-c">int a[] = {1, 2, 3, 4, 5};
</code></pre>
</li>
<li>
<p>C99中增加了一种特性，指定元素进行赋值，剩下的自动初始化为0。也就是说，可以针对不连续的几个元素赋值：</p>
<pre><code class="language-c">int a[10] = { [3] = 3, [5] = 5, [8] = 8 };//编译的时候记得加上-std=c99选项
</code></pre>
</li>
</ol>
<p>那可能你会说了，”你刚刚提到的一个问题还没解决呢！要是班里的人数变了怎么办呢？“</p>
<p>没错，我们现在就来解决下这个问题。</p>
<h1 id="可变长数组">可变长数组</h1>
<p>在C99标准推出之前，要求定义数组的时候，数组的维度必须是<strong>常量表达式</strong>或者<strong>const常量</strong>，但是C99标准中，支持了变量定义数组，那么，我们就可以将第一次的代码改成这样：</p>
<pre><code class="language-c">//Example 02
#include &lt;stdio.h&gt;
int main(void)
{
    int Member;
    printf(&quot;请输入班级人数：&quot;);
    scanf(&quot;%d&quot;, &amp;Member);
    int s[Member];//使用用户输入的值来确定数组的大小
    int i;
    float sum = 0;
    for (i = 0; i &lt; Member; i++)
    {
        printf(&quot;请输入第 %d 位同学的成绩：&quot;, i + 1);
            scanf(&quot;%d&quot;, &amp;s[i]);
        sum += s[i];
    }
    printf(&quot;成绩录入完毕，该次考试的平均分是：%.2f\n&quot;, sum/Menber);
    return 0;
}
</code></pre>
<p>这样，在开始存储成绩之前，先让使用者告诉程序班里有多少学生，该开辟多大的数组，然后就完美解决了人数变动的问题。</p>
<p>注意，这里的”可变长数组“是指的数组在程序运行的时候才<strong>确定长度</strong>，也就是说每一次运行都不一定一样。但是数组一旦被创建，在其生命周期内就不会再改变了，这是数组的<strong>根本特性</strong>。</p>
<p>但是，如果有的同学使用的是Visual Studio的话，是不支持C99的这个特性的(我也不知道为什么巨硬不支持，明明这么好的特性)，那么就只能使用<strong>动态分配</strong>的方法来创建数组。放在这里来讲的话有些超纲，后面会讲到。</p>
<h1 id="字符型数组">字符型数组</h1>
<p>还记得之前说过，C语言是没有字符串这种类型的。那么C语言处理字符串有两种方法：<strong>字符串常量</strong>和<strong>字符型数组</strong>。字符串常量是指用<strong>双引号</strong>括起来的字符串，一旦确定下来就<strong>无法改变</strong>。一般我们会更多地倾向于使用更加灵活的<strong>字符型数组</strong>。这样，数组中的每一个元素表示一个字符，当然还要多一位来表示<code>\0</code>。</p>
<p>那么接下来就讲讲字符串的一些方法，因为字符串实在是太重要了。</p>
<h2 id="获取字符串的长度">获取字符串的长度</h2>
<p>计算字符串的长度使用<code>strlen</code>函数（这是长度，不是尺寸）,这个函数包含在<code>string.h</code>中</p>
<pre><code class="language-c">#include &lt;string.h&gt;
...
size_t strlen ( const char * str );
</code></pre>
<p>这个方法是不包含字符串末尾的<code>\0</code>的。且看下面的例子：</p>
<pre><code class="language-c">//Example 03
#include &lt;stdio.h&gt;
#include &lt;string.h&gt;
int main(void)
{
    char str[] = &quot;I love Clang!&quot;;
    printf(&quot;sizeof str = %d\n&quot;, sizeof(str));
    printf(&quot;strlen str = %u\n&quot;, strlen(str));
    return 0;
}
</code></pre>
<p>运行结果如下：</p>
<pre><code>//Consequence 03
sizeof str = 14
strlen str = 13
</code></pre>
<p>除了验证不包含<code>\0</code>以外，我们还可以看到，<code>strlen</code>函数返回的是<code>size_t</code>而不是<code>int</code>。<code>size_t</code>被定义在<code>stddef.h</code>中，实际上就是<strong>无符号整型</strong>。</p>
<h2 id="复制字符串">复制字符串</h2>
<p>估计在第一次见到这个词的时候，你的大脑浮现出来的就是使用赋值符号<code>=</code>，但是，这是<strong>错的</strong>……</p>
<p>字符串的复制应该使用<code>strcpy</code>和<code>strncpy</code>来实现。</p>
<pre><code class="language-c">#include &lt;string.h&gt;
...
char *strcpy (char *dest, const char *src);
char *strncpy (char *dest, const char *src, size_t n);
</code></pre>
<p>不多废话，且看下面的例子：</p>
<pre><code class="language-c">//Example 04
#include &lt;stdio.h&gt;
#include &lt;string.h&gt;
int main(void)
{
	char str1[] = &quot;Original String&quot;;
	char str2[] = &quot;New String&quot;;
	char str3[100];
	strcpy(str1, str2);
	strcpy(str3, &quot;Successfully Copied&quot;);
	printf(&quot;\
str1: %s\n\
str2: %s\n\
str3: %s\n&quot;, \
		str1, str2, str3);
	return 0;
}
</code></pre>
<p>运行结果如下：</p>
<pre><code>//Consequence 04
str1: New String
str2: New String
str3: Successfully Copied
</code></pre>
<p>但是其实这个程序是<strong>有缺陷</strong>的。</p>
<p>我们可以看到，两个数组的长度其实<strong>不一样</strong>，我们现在是把短的复制到长的里面，那么不会有问题。如果上面的<code>str1</code>和<code>str2</code>对调一下，那么就极有可能出问题，这就是我们等会儿要讲的<strong>数组越界</strong>问题。</p>
<p>那么如何解决复制时的这个隐式bug呢？</p>
<p><strong>使用strncpy方法来复制</strong></p>
<p>如果超出的字符不是很多，那么程序有可能能够成功地运行。但是如果两者悬殊的话，那编译运行之后，程序会报<code>Segmentation fault</code>。</p>
<p>因此在复制的时候，我们应该确保不越界，在复制之后不溢出。那么使用<code>strncpy</code>函数，由于增加了一个参数来指定<strong>复制的字符个数</strong>，我们在编写代码的时候就可以规避这样的问题。</p>
<p>举个例子：</p>
<pre><code class="language-c">//Example 05
#include &lt;stdio.h&gt;
#include &lt;string.h&gt;
int main(void)
{
    char str1[] = &quot;TechZone was made by HarrisWilde&quot;;
    char str2[40];
    strncpy(str2, str1, 8);
    str2[8] = '\0';
    printf(&quot;%s\n&quot;, str2);
    return 0;
}
</code></pre>
<p>结果如下：</p>
<pre><code>//Consequence 05
TechZone
</code></pre>
<p>有一个地方要格外小心，<code>strncpy</code>函数<strong>并不会</strong>在字符串的末尾添加<code>\0</code>，因此在使用的时候要注意加上。</p>
<h2 id="连接字符串">连接字符串</h2>
<p>如果你想把一个字符串拼接到另一个后面的话，就可以使用<code>strcat</code>和<code>strncat</code>两个函数来实现。</p>
<pre><code class="language-c">#include &lt;string.h&gt;
...
char *strcat (char *dest, const char *src);
char *strncat (char *dest, const char *src, size_t n);
</code></pre>
<p>可以看到，这个函数的用法和上面复制字符串的用法完全相同，<code>strncat</code>也就是比<code>strcat</code>多了一个指定复制长度的参数罢了。</p>
<p>需要注意的是，这个函数<strong>会</strong>自动在末尾追加一个<code>\0</code>，这和复制不一样，要特别注意区分。</p>
<h2 id="比较字符串">比较字符串</h2>
<p>比较两个字符串，也和上面的一样，有两个类似的函数，<code>strcmp</code>和<code>strncmp</code>。</p>
<pre><code class="language-c">#include &lt;string.h&gt;
...
char *strcmp (char *dest, const char *src);
char *strncmp (char *dest, const char *src, size_t n);
</code></pre>
<p>采用这套函数来比较两个字符串是否相同的时候，如果两个字符串完全一致，那么返回的值为<code>0</code>。这个函数的原理是，从第一个字符开始，依次对比两个字符串中每个字符的ASCII，如果第一个字符串的ASCII小于第二个字符串对应的字符，那么返回一个小于<code>0</code>的数值（通常是<code>-1</code>），如果大于，那就会返回一个大于<code>0</code>的值（通常是<code>1</code>）。</p>
<p><code>strncmp</code>则是增加了一个参数，可以用来仅比较前面n个元素。</p>
<pre><code class="language-c">//Example 06
#include &lt;stdio.h&gt;
#include &lt;string.h&gt;
int main(void)
{
    char str1[10] = &quot;TechZone&quot;;
    char str2[20] = &quot;TechZone&quot;;
    if (!strcmp(str1, str2))
    {
        printf(&quot;Same!\n&quot;);
    }
    else
    {
        printf(&quot;Different!\n&quot;);
    }
    return 0;
}
</code></pre>
<p>运行结果为：</p>
<pre><code>//Consequence 06
Same!
</code></pre>
<h1 id="多维数组">多维数组</h1>
<p>有时候，使用数组来存储还是不够方便，比如，老师让你做一个全班全部科目的成绩的分析。如果利用我们刚刚所学习的数组知识，你可能会这么写：</p>
<pre><code class="language-c">//Example 07
#include &lt;stdio.h&gt;
int main(void)
{
    int chinese[50];
    int math[50];
    int English[50];
    int science[50];
    ...
}
</code></pre>
<p>但是如果我们使用二维数组的话，那么只需要定义一次就行了。</p>
<p>假设我们有6科。</p>
<p>那么就这样：</p>
<pre><code class="language-c">//Example 07 V2
#include &lt;stdio.h&gt;
int main(void)
{
    int score[6][50];
    ...
}
</code></pre>
<p>这其实就像一个表格一样，二维数组通常也被称为<strong>矩阵</strong>（matrix），将二维数组写成行和列的表示形式，可以形象地帮我们解决一些问题。</p>
<p>访问二维数组也和普通的数组一样，也是从<code>0</code>开始计数的，只不过下标随着维度的变化会增加罢了（比如二维数组就有2个下标）。</p>
<h2 id="二维数组的初始化">二维数组的初始化</h2>
<ol>
<li>
<p>二维数组在内存中是<strong>线性存放</strong>的，因此可以将所有的数据写在一个大括号内：</p>
<pre><code class="language-c">int a[2][3] = {1, 2, 3, 4, 5, 6};
</code></pre>
<p>这样就是先将第一行的三个元素初始化，然后再初始化第二行的元素。</p>
</li>
<li>
<p>为了更直观地表达我们可以这么写：</p>
<pre><code class="language-c">int a[2][3] = {
    {1, 2, 3},
    {4, 5, 6}
};
</code></pre>
</li>
<li>
<p>二维数组也可以仅对<strong>部分元素</strong>赋值：</p>
<pre><code class="language-c">int a[2][3] = {{1}, {4}};
</code></pre>
<p>这样写只是对各行的第一列元素赋值，其余的全部为0.</p>
</li>
<li>
<p>如果希望全部为0，那么可以这么写：</p>
<pre><code class="language-c">int a[2][3] = {0};
</code></pre>
</li>
<li>
<p>C99中增加的指定赋值的特性，这里也可以适用。其余未被操作的元素为<code>0</code>。</p>
<pre><code class="language-c">int a[2][3] = {[0][0] = 1, [1][2] = 6};
</code></pre>
</li>
<li>
<p>二维数组也可以偷懒，但是<strong>只有第一维度</strong>的元素个数可以不写，其他的都要写上：</p>
<pre><code class="language-c">int a[][3] = {
    {1, 2, 3},
    {4, 5, 6}
};
</code></pre>
</li>
</ol>
<h1 id="数组越界">数组越界</h1>
<p>我们刚刚说过了，我们在写程序的时候，尽量要把越界的情况通过代码的努力来规避。那么，可能有的小伙伴比较感兴趣，如果越界了，会发生什么呢？</p>
<p>那好，咱们就来试试。</p>
<pre><code class="language-c">//Example 08
#include &lt;stdio.h&gt;

void f();

int main(void)
{
    f();
    return 0;
}

void f()
{
    int a[10];
    a[10] = 0;//这里我们写到了一个不存在的下标里面
}
</code></pre>
<p>我们来跑一下这个程序。</p>
<p>笔者使用的Visual Studio 2019给出了以下的错误提示：</p>
<pre><code>//Consequence 08
Run-Time Check Failure #2 - Stack around the variable 'a' was corrupted.
</code></pre>
<p>它发现了我在写入一个<strong>错误的地址</strong>。并且还给了我两个<strong>warning</strong>：</p>
<pre><code>警告	C6201	索引“10”超出了“0”至“9”的有效范围(对于可能在堆栈中分配的缓冲区“a”)。
警告	C6386	写入到“a”时缓冲区溢出: 可写大小为“40”个字节，但可能写入了“44”个字节。	
</code></pre>
<p>如果我们像普通程序员一样，不管代码warning，直接强制执行，试试会发生什么。</p>
<p>为了更直观体现，我们把代码改成这样：</p>
<pre><code class="language-c">//Example 08
#include &lt;stdio.h&gt;

void f();

int main(void)
{
    f();
    printf(&quot;Here\n&quot;);//我们加了这句，如果函数正常执行完毕了，就可以看到这个语句的输出
    return 0;
}

void f()
{
    int a[10];
    a[10] = 0;
}
</code></pre>
<p>还是出现了这句：</p>
<pre><code>Run-Time Check Failure #2 - Stack around the variable 'a' was corrupted.
</code></pre>
<p>控制台上面没有看到<code>Here</code>的输出，说明函数还没有执行完，程序就已经<strong>崩溃</strong>了，根本没办法执行到输出。</p>
<p>但是，为什么编译器没有给我<strong>error</strong>，而是给了我<strong>warning</strong>呢？</p>
<p>有的编译器可能连warning都没有。</p>
<p>实际上，我们在对<code>a[10]</code>写入的时候，其实是<strong>成功</strong>了的。只不过我们把<code>a[10]</code>写在了一个<strong>不该写的地方</strong>（实际上就是这段数组内存的后面），干扰到了其他东西的运行，程序就有可能会崩溃。如果后面的内存为空或者是没有被回收的垃圾内存，那么就没关系，但是如果是有用的内存，出问题就很正常了。</p>
<p>有时候我们写了一个程序，可能这次运行没问题，下一次运行就出错，或者是在我的电脑上可以，在你的电脑上就不行了等等，都有可能是数组越界，或者是我们后面要学的指针出错了。我们作为创造代码的人，有责任通过代码上的设计，来规避这样的问题，避免程序的崩溃。</p>
<h1 id="长度为0的数组">长度为0的数组？</h1>
<p>有的同学可能会异想天开，说，我可不可以定义一个长度为0的数组呢？</p>
<p>类似于这样：</p>
<pre><code class="language-c">int a[0];
</code></pre>
<p>答案是，完全没问题！</p>
<p>不信的话可以去试试，编译可以通过的，只不过这样的数组不存在任何意义，因为没有符合要求的下标。我们说，最大的下标就是元素个数-1，那么<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn><mo>−</mo><mn>1</mn><mo>=</mo><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">0-1=-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">−</span><span class="mord">1</span></span></span></span>，-1显然不是一个合法的下标。所以这样的操作可行，但是没有任何意义。</p>
<p>好了，本节内容就到这里了，希望你能够从中有所收获哦！</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[杂谈·一个神一般的随机算法]]></title>
        <id>https://harriswilde.github.io/post/GreatRandom</id>
        <link href="https://harriswilde.github.io/post/GreatRandom">
        </link>
        <updated>2019-11-15T02:31:28.000Z</updated>
        <content type="html"><![CDATA[<p>这篇文章，我们从一个经典的面试题开始讲起。这个题目，可能会有很多形式，但是背后的逻辑是一样的：<strong>如何写出一个公平的洗牌算法</strong>。</p>
<p>洗牌嘛，不就是个随机算法吗？直接搞一个数组，把牌全部放进去，然后对调两张牌，随机k次即可。</p>
<p>你要敢这样回答，那面试官肯定会问，k取多少呢？</p>
<p>显然不能是个常量，如果你取10,000，如果只有100张牌，显然太多了，如果有100,000张呢？又太少了。</p>
<p>那你可能会想，让k随着牌的数量变化不就行了？嗯，的确，这个想法已经比刚刚的强很多了，但是你要敢这么回答，面试官多半会坏笑然后问你，你这个算法，公平吗？<br>
再回去看看问题：如何写出一个<strong>公平</strong>的洗牌算法。</p>
<p>刚刚忙活了那么久，其实连问题的本质都没有触及。这题的关键，在于设计<strong>公平</strong>。</p>
<hr>
<p>一个面试官面试，往往看的不是你是否答对了问题，因为一道面试题，答案不只一种。如果你有对题目足够强的<strong>思维能力</strong>，你就是面试官要的人。如果你看到这道题，一开始就是从<strong>公平</strong>入手，那么你是很优秀的。因为背出一个算法很容易，但是这种探求问题根源的思维角度，绝不是一朝之功。这是一种不断面对问题，不断解决问题而逐渐锻炼出来的能力。</p>
<hr>
<p>那么我们就来看看，对于这个算法，公平的定义是什么。</p>
<p>如果有n张牌，那么排序的可能性就是<strong>n!</strong>。我们可以生成所有的可能性，然后随机选一个。这种算法是<strong>绝对公平</strong>的。但是，复杂度太高。这个复杂度达到了<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>!</mo><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n!)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">!</span><span class="mclose">)</span></span></span></span>。因为我们需要计算<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>!</mo></mrow><annotation encoding="application/x-tex">n!</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">n</span><span class="mclose">!</span></span></span></span>种排列，那么就至少需要<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>!</mo></mrow><annotation encoding="application/x-tex">n!</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">n</span><span class="mclose">!</span></span></span></span>的时间。</p>
<p>有的同学可能对这样的复杂度不太感冒。这是一个比<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mi>n</mi></msup></mrow><annotation encoding="application/x-tex">2^n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.664392em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span></span></span></span>还要高的复杂度。<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mi>n</mi></msup></mrow><annotation encoding="application/x-tex">2^n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.664392em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span></span></span></span>是n个2相乘，而<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>!</mo></mrow><annotation encoding="application/x-tex">n!</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">n</span><span class="mclose">!</span></span></span></span>也是n个数，而这些数<strong>除了1比2小</strong>以外，其他的数都≥2。而<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mi>n</mi></msup></mrow><annotation encoding="application/x-tex">2^n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.664392em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span></span></span></span>已经是指数爆炸了，在n≥4的时候，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>!</mo></mrow><annotation encoding="application/x-tex">n!</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">n</span><span class="mclose">!</span></span></span></span>以极快的速度超越<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mi>n</mi></msup></mrow><annotation encoding="application/x-tex">2^n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.664392em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span></span></span></span>。</p>
<p>这个算法的确是公平的，但是<strong>时间不能允许</strong>。</p>
<hr>
<p>我们再换一种角度去思考公平的问题。公平其实也可以理解为，我们每一张牌出现在<strong>每一个位置的概率</strong>都相等。这个定义和上面提到的暴力算法其实是等价的，学过概率论的同学可以去证明下。根据这个定义，我们就可以很快写出一个简单的算法：</p>
<pre><code class="language-c">for (int i = n-1; i &gt;= 0; i--)
    swap(arr[i], arr[rand() % (i +1)]);
</code></pre>
<p>说它简单，是因为就一层循环。</p>
<p>小伙伴们可以看看这个循环在干什么。其实就是将下标为i的元素，和一个随机下标的元素<strong>交换位置</strong>。而为了确保随机的数在[0,i]的范围内，我们用了取余运算除以(i+1)。</p>
<p><strong>这个算法就是大名鼎鼎的 Knuth-Shuffle，即 Knuth 洗牌算法。</strong></p>
<p>原理待会儿再讲，我们先来看看这个传奇般的人物。</p>
<p>中文名:高纳德。算法理论的创始人。我们现在所使用的各种算法复杂度分析的符号，就是他发明的。上世纪60-70年代计算机算法的黄金时期,近乎就是他一手主导的。他的成就实在是太多，一本书估计都写不完。</p>
<p>大家最津津乐道的，就是他所写的《The Art of Computer Programming 》，简称TAOCP 。这套书准备写七卷，然后，到今天还没有写完，但已经被《科学美国人》评为可以媲美相对论的巨著。微软还是IT界老大的时代，盖茨就说过，如果你看完了这套书的第一卷本，<strong>那你直接给我发简历</strong>。<br>
<img src="http://upload-images.jianshu.io/upload_images/19749646-76ae42612182d1bb.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1440/q/50" alt="TAOCP" loading="lazy"></p>
<p>至于这套书为什么写这么慢，因为老头子当时写这本书，写到一半觉得时下的排版工具都太烂了，<strong>于是转手就发明了现在流行的LaTeX……</strong></p>
<p>另外，他可能也觉得当时的所有编程语言都无法描述自己的思想，于是自己发明了一套抽象逻辑语言用于展示这套书的逻辑部分……</p>
<p>（感受到了和大佬的差距）</p>
<p>下面这句话，和大家共勉：</p>
<blockquote>
<p>A programmer who subconsciously views himself as an artist will enjoy what he does and will do it better.<br>
——Donald E. Knuth 1978</p>
</blockquote>
<hr>
<p>下面就来看看具体是怎么通过这样一个简单的算法来实现绝对公平的。</p>
<p>其实，可怕的地方，就在于<strong>太简单</strong>……<br>
我们用5个数字来简单模拟下这个算法：</p>
<blockquote>
<p>1 2 3 4 5</p>
</blockquote>
<p>这个算法，会在5个元素中选出一个元素和最后一个元素交换。假设我们选择3。就变成这样：</p>
<blockquote>
<p>1 2 5 4 3</p>
</blockquote>
<p>那么这个3出现在最后的概率是多少呢？从5个里面挑嘛，那肯定是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mn>1</mn><mn>5</mn></mfrac></mrow><annotation encoding="application/x-tex">\frac{1}{5}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">5</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>嘛。</p>
<p>再选一个，假设选到了1，那么就变成这样：</p>
<blockquote>
<p>4 2 5 1 3</p>
</blockquote>
<p>这个1出现在这个位置的概率又是多少呢？</p>
<p>上面那一轮，1没被挑走，而这一轮里面挑走了。</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mn>4</mn><mn>5</mn></mfrac><mo>×</mo><mfrac><mn>1</mn><mn>4</mn></mfrac><mo>=</mo><mfrac><mn>1</mn><mn>5</mn></mfrac></mrow><annotation encoding="application/x-tex">\frac{4}{5}\times\frac{1}{4}=\frac{1}{5}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.00744em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">5</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.00744em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">4</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.00744em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">5</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p>
<p>还是等于<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mn>1</mn><mn>5</mn></mfrac></mrow><annotation encoding="application/x-tex">\frac{1}{5}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">5</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>！</p>
<p>继续，假设这次是2。</p>
<blockquote>
<p>4 5 2 1 3</p>
</blockquote>
<p>概率依旧</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mn>4</mn><mn>5</mn></mfrac><mo>×</mo><mfrac><mn>3</mn><mn>4</mn></mfrac><mo>×</mo><mfrac><mn>1</mn><mn>3</mn></mfrac><mo>=</mo><mfrac><mn>1</mn><mn>5</mn></mfrac></mrow><annotation encoding="application/x-tex">\frac{4}{5}\times\frac{3}{4}\times\frac{1}{3}=\frac{1}{5}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.00744em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">5</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.00744em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">4</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.00744em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">3</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.00744em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">5</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p>
<p>假设下一个是4，那么</p>
<blockquote>
<p>5 4 2 1 3</p>
</blockquote>
<p>概率</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mn>4</mn><mn>5</mn></mfrac><mo>×</mo><mfrac><mn>3</mn><mn>4</mn></mfrac><mo>×</mo><mfrac><mn>2</mn><mn>3</mn></mfrac><mo>×</mo><mfrac><mn>1</mn><mn>2</mn></mfrac><mo>=</mo><mfrac><mn>1</mn><mn>5</mn></mfrac></mrow><annotation encoding="application/x-tex">\frac{4}{5}\times\frac{3}{4}\times\frac{2}{3}\times\frac{1}{2}=\frac{1}{5}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.00744em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">5</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.00744em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">4</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.00744em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">3</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.00744em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.00744em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">5</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p>
<p>而这样5就只能在第一个位置了，概率还是</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mn>4</mn><mn>5</mn></mfrac><mo>×</mo><mfrac><mn>3</mn><mn>4</mn></mfrac><mo>×</mo><mfrac><mn>2</mn><mn>3</mn></mfrac><mo>×</mo><mfrac><mn>1</mn><mn>2</mn></mfrac><mo>=</mo><mfrac><mn>1</mn><mn>5</mn></mfrac></mrow><annotation encoding="application/x-tex">\frac{4}{5}\times\frac{3}{4}\times\frac{2}{3}\times\frac{1}{2}=\frac{1}{5}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.00744em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">5</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.00744em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">4</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.00744em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">3</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.00744em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.00744em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">5</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p>
<p>大家看到了，自始至终，所有的位置出现的概率<strong>都是相等的</strong>，如果数组长度是n，那么每个位置的概率就是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mn>1</mn><mi>n</mi></mfrac></mrow><annotation encoding="application/x-tex">\frac{1}{n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>，而复杂度<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>，比<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>!</mo><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n!)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">!</span><span class="mclose">)</span></span></span></span>少了太多太多……</p>
<p>这个算法不仅仅可以用来洗牌，很多场景下的随机都可以使用。大家可以自己思考下，也可以运用于实际的解题甚至是开发之中。</p>
<p>其实大家应该有感觉了，<strong>算法绝对不是枯燥的逻辑堆砌，而是神一般的逻辑创造</strong>。这个世界也是如此，尽管极其复杂，变化万千，但又竟是如此简洁，巧妙而优雅…</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[C语言的分支与循环]]></title>
        <id>https://harriswilde.github.io/post/CBranchCycle</id>
        <link href="https://harriswilde.github.io/post/CBranchCycle">
        </link>
        <updated>2019-11-07T02:24:12.000Z</updated>
        <content type="html"><![CDATA[<p>如果说我们之前写过的代码都是“直男”，也就是说不管三七二十一，一路走到黑，那么今天我们就来见识下“多虑”型的还有“徘徊”型的代码。（你没有看错，代码不仅可以犹豫，还可以徘徊）</p>
<p>不过，在这之前，我还是来介绍两个之前就应该讲到的知识，与下文可能关系不大，但是放哪儿讲都差不多。</p>
<h1 id="字符串">字符（串）</h1>
<p>我们其实已经知道了C语言只有<strong>字符</strong>一种变量，就是<code>char</code>，而并没有像某些语言那样规定<strong>字符串</strong>这种类型。但是，是不是字符串在C语言里面就没有呢？</p>
<p>其实不然，只不过没有专属的类型而已。</p>
<p>定义一个字符的的方法，想必大家都已经掌握了，就像下面这个例子一样：</p>
<pre><code class="language-c">//Example 01
#include &lt;stdio.h&gt;
int main(void)
{
    char Letter;
    Letter = 'A';
    return 0;
}
</code></pre>
<p>这样，我们就定义了一个叫Letter的字符变量,并且赋值为字符A。</p>
<p>那么字符串该如何定义呢？</p>
<pre><code class="language-c">//Example 02
#include &lt;stdio.h&gt;
int main(void)
{
    char String[8];
    String = {'T','e','c','h','Z','o','n','e'};
    printf(&quot;%s&quot;,String);
    return 0;
}
</code></pre>
<p>这样，我们就定义了一个名字叫String的<strong>字符串</strong>，还让它输出到我们屏幕上了。如果你了解过<strong>数组</strong>，就觉得这种方式很像数组对吧，这里提前告诉大家，<strong>字符串就是一种数组</strong>。但是，如果你去执行下这段代码你就会发现问题了。输出的TechZone后面，还会跟着一些乱码……</p>
<p>咦？我明明只定义了8个字符，怎么还多出来这些鬼东西呢？</p>
<p>那么，我们来了解下C语言时如何处理字符串的。我们可以理解，字符串的长度是有限的，而且长度<strong>一旦确定</strong>，在其生命周期里就<strong>无法再次更改</strong>。那么，系统为了确保字符串是真的结束了，会在<strong>末尾</strong>加一个<code>\0</code>来表示字符串的结束。我们做如下的修改，就可以让字符串正常工作了：</p>
<pre><code class="language-c">//Example 03
#include &lt;stdio.h&gt;
int main(void)
{
    char String[9];
    String = {'T','e','c','h','Z','o','n','e','\0'};
    printf(&quot;%s&quot;,String);
    return 0;
}
</code></pre>
<p>你可能会想了，这样也太麻烦了吧，要是我要输入一句话，那得多少个引号逗号，最后还可能忘记加\0。你这是把程序员不当人看？？</p>
<p>当然不会。我们可以这样定义：</p>
<pre><code class="language-c">//Example 04
#include &lt;stdio.h&gt;
int main(void)
{
    char String[];
    String = {&quot;TechZone&quot;};
    printf(&quot;%s&quot;,String);
    return 0;
}
</code></pre>
<p>看到了吧，是不是简单很多了？而且后面还会<strong>自动补上</strong>一个<code>\0</code>，简直就是高枕无忧了。</p>
<p>有人可能有意见了，说你怎么不早点告诉我，害得我差点不学了……</p>
<p>学习当然得从学基础的开始啦，别打我，别打我……</p>
<h1 id="强制类型转换">强制类型转换</h1>
<p>在<strong>操作数不同</strong>的情况下，大部分的运算符中，都会将<strong>精度低</strong>的类型转成<strong>精度高</strong>的类型，这样做，其实也就是为了确保精度罢了。</p>
<p>但是有的时候，我们也许并不希望像系统那样的转换，那么我们可以自己进行强制转换。</p>
<p>具体方法：<code>(类型名称)变量名或值</code></p>
<p>例如：</p>
<pre><code class="language-c">//Example 05
#include &lt;stdio.h&gt;
int main(void)
{
    int num;
    num = (float)5/9;
    printf(&quot;%d&quot;,num);
    return 0;
}
</code></pre>
<p>在这个例子中，我们将5这个<strong>整型</strong>转化成了<strong>浮点型</strong>，那么为了确保精度，系统也会将后面的9也转化成浮点型。那么这样就可以输出结果，不然结果就是0（因为两个整型相除结果也会<strong>取整</strong>，然鹅，强制取整的结果就是<strong>保留整数</strong>，而<strong>不是</strong>四舍五入）。</p>
<hr>
<h1 id="分支条件语句">分支(条件语句)</h1>
<p>我们高中数学中，如果有学过程序框图的同学，应该就还依稀记得程序的几种结构，其中<strong>分支</strong>和<strong>循环</strong>就是今天要谈的两大结构。</p>
<p>首先我们来看看一些分支里面经常使用的运算符：</p>
<ol>
<li>
<p>关系运算符</p>
<table>
<thead>
<tr>
<th>运算符</th>
<th>优先级</th>
</tr>
</thead>
<tbody>
<tr>
<td>&lt;</td>
<td>高</td>
</tr>
<tr>
<td>&lt;=</td>
<td>高</td>
</tr>
<tr>
<td>&gt;</td>
<td>高</td>
</tr>
<tr>
<td>&gt;=</td>
<td>高</td>
</tr>
<tr>
<td>==</td>
<td>低</td>
</tr>
<tr>
<td>!=</td>
<td>低</td>
</tr>
</tbody>
</table>
</li>
<li>
<p>逻辑运算符</p>
<table>
<thead>
<tr>
<th>运算符</th>
<th>优先级</th>
</tr>
</thead>
<tbody>
<tr>
<td>!    (逻辑非)</td>
<td>高</td>
</tr>
<tr>
<td>&amp;&amp;(逻辑与)</td>
<td>中</td>
</tr>
<tr>
<td>||   (逻辑或)</td>
<td>低</td>
</tr>
</tbody>
</table>
</li>
</ol>
<p>此外，在编译器中，所有的字符都被看成ASCII，因此ASCII字符之间运算或者比较等等都是<strong>合法的</strong>。</p>
<h2 id="短路求值">短路求值</h2>
<p>在C语言中，如果设置两个表达式，在求出<strong>第一个式子</strong>即可判断出结果的时候，系统就<strong>不会</strong>继续求第二个式子。这看上去是编译器的一种算法的优化，但是如果写代码的时候不注意的话，很有可能造成一些隐性的漏洞，看下面的例子：</p>
<pre><code class="language-c">//Example 06
#include &lt;stdio.h&gt;
int main(void)
{
    int a = 3,b = 3;
    (a = 0) &amp;&amp; (b = 5);
    printf(&quot;a=%d, b=%d\n&quot;,a,b);
    //==========================
    (a = 1) || (b = 5);
    printf(&quot;a=%d, b=%d\n&quot;,a,b);
    return 0;
}
</code></pre>
<p>如果你愿意自己尝试的话，可以自己去环境里面试试，如果不愿意的话那直接看下面的结果：</p>
<pre><code>//Consequence 06
a=0,b=3
a=1,b=3
</code></pre>
<p>如果没有开头的那段解释，我相信很多初学者都会很懵逼，怎么会这样？</p>
<p>不着急，我们来分析下代码。</p>
<p>我们看看分割线上面的那部分，a和b都被初始化成了整型并且赋值为3。在第一句逻辑判断语句里面，是判断的<strong>逻辑与</strong>，也就是说，<strong>全真则真，一假全假</strong>。那么在判断数字的时候，则默认0为假，非0为真。那么这句<code>(a = 0) &amp;&amp; (b = 5);</code>前面，a已经被赋值为0，那么已经为假了，在逻辑与的情况下，就算后面的条件再真，整体也是假的了，这就是所谓的<strong>一假全假</strong>。那么，在判断了第一个表达式之后，就可以做出判断结果，那么后面的<code>b=5</code>就<strong>不会</strong>被执行。</p>
<p>同理，分割线下面的代码也是一个道理。只不过这里判断变成了<strong>逻辑或</strong>。逻辑或的标准就是<strong>一真则真，全假才假</strong>。那么，前面的<code>a=1</code>，系统发现，欸，已经是真了哟！那么马上罢工，后面的<code>b=5</code>也就<strong>不予理会</strong>了。那么输出的结果就是上面那样了，理解了吧？</p>
<p>我们现在单独这样讲这个特性，貌似感觉看不出什么，但是以后写代码的时候其实要留意下短路求值，因为这样子可能就会造成你的程序里面有Bug，而且还相当<strong>不好找</strong>！！</p>
<h2 id="if语句">if语句</h2>
<p>if语句实际上就是判断条件，若符合的就输出。之所以叫它分支，那是因为如果到了条件语句，那么这里面的代码就<strong>不一定都能</strong>执行了，而是看情况来。也就是说，条件语句里面的<strong>部分代码</strong>，可能你的程序跑完了都没有没用到，因此就叫分支。</p>
<p>那么if语句的通式就像下面那样</p>
<pre><code class="language-c">if (...)
{
    ...;
}
else if (...)//可选
{
    ...;
}
else if (...)//可选
{
    ...;
}
...;//else if可有多个
else //上述条件都不符合，则执行这个语句，可选
{
    ...;
}
</code></pre>
<p>我想大家看里面的注释就能够大致明白的差不多了。其中if语句是<strong>必须</strong>的，其他的是<strong>可选</strong>的。else if则表示的是当if的条件不符合的时候，就会继续判断所有的else if，若有符合条件的就执行后面的语句，若都不符合就执行else的语句。如果没有else if而有else，那么当if不符合的时候就执行else后面的语句。若有else if没有else，则无符合条件的话不执行任何语句。else if和else都没有的话，那么if不符合的时候就啥都不干。</p>
<p>看下面的例子，我们来制作一个识别星期的程序并且给出建议：</p>
<pre><code class="language-c">//Example 07
#include &lt;stdio.h&gt;
int main(void)
{
    int Weekday;
    printf(&quot;输入今天星期的数字：&quot;);
    scanf(&quot;%d&quot;,&amp;Weekday);//此处用于获取用户输入的内容并赋值给Weekday
    if (Weekday &gt;= 1 &amp;&amp; WeekDay &lt;= 5)
    {
        printf(&quot;今天是工作日！好好工作！\n&quot;);
    }
    else if (Weekday &gt;=6 &amp;&amp; Weekday &lt;=7)
    {
        printf(&quot;今天是周末！好好休息！&quot;);
    }
    else
    {
        printf(&quot;你输入有误哦！&quot;);
    }
    return 0;
}
</code></pre>
<p>看到了吧，我们成功地运用了分支。这个只是一个简单的例子，以后大家写程序的时候，大概就没有这么简单的了。很多情况下，我们需要<strong>嵌套分支</strong>来使用。那么嵌套的时候，有些地方就要注意了，下面引用一个例子：</p>
<pre><code class="language-c">//Example 08
#include &lt;stdio.h&gt;
int main(void)
{
    char isRain,isFree;
    
    printf(&quot;是否有空？（Y/N）&quot;);
    scanf(&quot;%c&quot;,&amp;isFree);
    
    printf(&quot;是否下雨？（Y/N）&quot;);
    scanf(&quot;%c&quot;,&amp;isRain);
    
    if (isFree == 'Y' || isFree == 'y')
        if (isRain == 'Y' || isRain == 'y')
            printf(&quot;记得带伞哦！\n&quot;);
    else 
        printf(&quot;女神没空！\n&quot;);
    return 0;
}
</code></pre>
<p>程序实现如下：</p>
<pre><code>//Consequence 08-1
是否有空？（Y/N）Y
是否下雨？（Y/N）Y
记得带伞哦！
</code></pre>
<p>貌似没什么问题，但是如果下面这样：</p>
<pre><code>//Consequence 08-2
是否有空？（Y/N）Y
是否下雨？（Y/N）N
女神没空！
</code></pre>
<p>我的天，女神有空而且天公作美的情况下，程序居然告诉我女神没空？？？</p>
<p>其实我们分析下代码。代码的意思，大概是先在有空的情况下，如果下雨就提醒带伞，如果没空就直接告诉你没空。可是上面的问题是怎么回事呢？</p>
<p>其实你们被上面的<strong>缩进</strong>骗了。从上面的缩进来看，else应该是与第一个if同级，而不是第二个。但是！由于你<strong>没有</strong>加大括号，C语言没法判断你的语句块从属关系，那么就<strong>默认</strong>else跟随<strong>最近</strong>的那一个if。所以，这里的else是跟随第二个if的，这么看就不难理解输出结果了。如果要更改，那么像下面这样就可以了：</p>
<pre><code class="language-c">//Example 08 V2
#include &lt;stdio.h&gt;
int main(void)
{
    char isRain,isFree;
    
    printf(&quot;是否有空？（Y/N）&quot;);
    scanf(&quot;%c&quot;,&amp;isFree);
    
    printf(&quot;是否下雨？（Y/N）&quot;);
    scanf(&quot;%c&quot;,&amp;isRain);
    
    if (isFree == 'Y' || isFree == 'y')
    {
        if (isRain == 'Y' || isRain == 'y')
        {
            printf(&quot;记得带伞哦！\n&quot;);
        }
    }
    else 
        printf(&quot;女神没空！\n&quot;);
    return 0;
}
</code></pre>
<p>建议所有的if都打上大括号，至于怎么打，是个人习惯，比如<code>{</code>是打在if之后还是下一行，这都无所谓，但是确定了就尽量使用一种，不然以后自己看自己写的代码都会感觉很奇怪了。</p>
<h2 id="switch-语句">switch 语句</h2>
<p>虽然if语句十分方便而且灵活，但是在某些情况下，使用switch还是会更直观一些。</p>
<p>switch的通式为：</p>
<pre><code class="language-c">switch(变量名)
{
    case 常量1:语句1;break;
    case 常量2:语句2;break;
    case 常量3:语句3;break;
    case 常量4:语句4;break;
    case 常量5:语句5;break;
    case 常量6:语句6;break;
        ...
    case 常量n:语句n;break;
    default 常量:语句;break;
}
</code></pre>
<p>switch语句中case后面只能跟一个<strong>确定的值</strong>，而不能是范围等等。所以在特定的条件下会很直观，但是不够灵活。</p>
<p>比如上面Example 07中的代码，用switch可以这么改写：</p>
<pre><code class="language-C">//Example 07 V2
#include &lt;stdio.h&gt;
int main(void)
{
    int (Weekday);
    printf(&quot;输入今天星期的数字：&quot;);
    scanf(&quot;%d&quot;,&amp;Weekday);//此处用于获取用户输入的内容并赋值给Weekday
    switch Weekday
    {
        case 1:printf(&quot;今天周一，一鼓作气&quot;);break;
        case 2:printf(&quot;今天周二，再接再厉&quot;);break;
        case 3:printf(&quot;今天周三，坚持到底&quot;);break;
        case 4:printf(&quot;今天周四，效率第一&quot;);break;
        case 5:printf(&quot;今天周五，最后一击&quot;);break;
        case 6:printf(&quot;今天周六，好好休息&quot;);break;
        case 7:printf(&quot;今天周日，玩的开心&quot;);break;
        default:printf(&quot;你输入的有误哦！&quot;);break;
    }
}
</code></pre>
<p>这样一来是不是很直观呢？但是虽然直观，不是所有的时候都适合用这样的语句，大家根据自身的情况来选就行啦。</p>
<p>至于为什么一定要加break，那是因为其实case在这里面只是一个<strong>标记</strong>而已，也就是说，如果我满足case3，那么程序就自动<strong>跳到</strong>case3，然后<strong>继续往下</strong>执行。假设我一共有case7，那么不加break的话，case3一直到case7的语句都会被<strong>逐个执行</strong>，明白了吧？</p>
<hr>
<h1 id="循环">循环</h1>
<p>上面分支讲了那么多，现在我们来看看循环。</p>
<p>可以说，循环的出现，大大减少了程序员的工作量。而且正因为有了循环，程序员才能够通过巧妙的算法来使用循环去解决问题。比如，我现在想输出1-100之间的所有整数，如果没学循环，你可能会这么写：</p>
<pre><code class="language-c">//Example 09
#include &lt;stdio.h&gt;
int main(void)
{
    printf(&quot;1\n&quot;);
    printf(&quot;2\n&quot;);
    printf(&quot;3\n&quot;);
    ...
    printf(&quot;100\n&quot;);
    return 0;
}
</code></pre>
<p>这样写的逻辑思路没有错，但是谁会愿意呢？这样的编程有什么意义？我还不如拿一张纸记下来还更快呢。但是，我们是可以发现其中的规律的，就是每次输出都比之前的数大1，对吧？这就是接下来要讲的循环。</p>
<h2 id="while循环">while循环</h2>
<p>while循环也就是我们所说的<strong>当型循环</strong>。它的通式是：</p>
<pre><code>while(条件表达式)
	循环体
</code></pre>
<p>当满足一定的条件的时候，程序会自动循环写在循环体中的代码。比如上面的例子09中所体现出的，输出1-100。那么我们实现思路可以先设置一个变量，让这个变量<strong>每循环一次就加个1</strong>，然后当加到101的时候停止即可。写成代码如下：</p>
<pre><code class="language-c">//Example 09 V2
#include &lt;stdio.h&gt;
int main(void)
{
    int i = 1;
    while (i &lt; 101)
    {
        printf(&quot;%d\n&quot;,i);
        i++;
    }
    return 0;
}
</code></pre>
<p>这样，程序就自动执行输出我们想要的结果了，比一个一个手动要快了太多。</p>
<h2 id="do-while循环">do-while循环</h2>
<p>如果说while循环是个君子，那么do-while就是莽夫。while是<strong>先判断再执行</strong>，而本少爷则是管他什么，<strong>先执行再说</strong>。你可能已经猜到了，这就是直到型循环。do-while的语句通式如下：</p>
<pre><code class="language-c">do
    循环体
while (条件表达式);//(注意，这里有分号)
</code></pre>
<p>比如我们要算1加到100的和，也可以通过上面的例子用do-while进行更改：</p>
<pre><code class="language-c">//Example 09 V3
#include &lt;stdio.h&gt;
int main(void)
{
    int i = 1,sum = 0;
    do
    {
        sum += i;
        i++;
    }
    while (i&lt;101);
    printf(&quot;结果是%d\n&quot;,sum);
    return 0;
}
</code></pre>
<p>这次就不是每次都输出i了，而是每次吧i的值加到sum里面去，这样就可以算出最终结果了。</p>
<h2 id="for循环">for循环</h2>
<p>通过上面的两个例子大家也应该有点感觉了，在循环之前，一般是要定义一个<strong>计数变量</strong>，以此作为循环<strong>结束</strong>的参考。那么既然这样，有没有一种东西可以一次完成呢？这就是for语句。for循环就把计数变量和条件整合到一起去了，看通式：</p>
<pre><code class="language-c">for (循环初始化;循环条件;循环调整)
    循环体;
</code></pre>
<p>具体是啥意思，我们还是看例子。我们把上面的求和代码改成使用for：</p>
<pre><code class="language-c">//Example 09 V4
#include &lt;stdio.h&gt;
int main(void)
{
	int i, sum = 0;
	for (i = 1; i &lt; 101; i++)
	{
		sum += i;
	}
	printf(&quot;结果是%d&quot;, sum);
	return 0;
}
</code></pre>
<p>其实也是非常直观的。for语句其实三个成分可以<strong>不用都写</strong>甚至可以<strong>不写</strong>，但是分号一定要<strong>保留</strong>。如果没有明确的目的，那么最好不要这样用，因为会使代码可读性下降。</p>
<h2 id="break语句">break语句</h2>
<p>这个语句用于跳出循环。如果我们遍历<code>i</code>来寻找一个值，但凡找到，那其实就不用往下继续找了，那么就可以在循环中设置一个条件语句，如果找到结果则使用<code>break</code>跳出循环，这样可以节约算力。</p>
<p>但是，<code>break</code>只能跳出<strong>当前所在</strong>的循环，使用的时候一定注意。</p>
<h2 id="continue语句">continue语句</h2>
<p>跳过本轮循环然后进入下一轮循环。这个直接说可能没什么概念，我们看看下面的例子：</p>
<pre><code class="language-c">//Example 10
#include &lt;stdio.h&gt;
int main(void)
{
    int ch;
    while ((ch = getchar()) != '\n')
    {
        if (ch == 'e')
        {
            countinue;
        }
        putchar(ch);
    }
    putchar('\n');
    return 0;
}
</code></pre>
<p>这段代码是让用户输入一些字符，然后剔除其中的e然后再输出。</p>
<pre><code>//Consequence 10
TechZone
TchZon
</code></pre>
<p>应该很好理解吧，只要遇到了e就跳出本次循环，于是<code>putchar()</code>就被跳过去了。</p>
<p>可能有很多同学都觉得<code>for</code>和<code>while</code>其实差不多，但是，在<code>continue</code>语句里面很有可能就不一样。比如：</p>
<pre><code class="language-c">//Example 11
#include &lt;stdio.h&gt;
int main(void)
{
    int i;
    for (i = 1; i &lt; 10; i++)
    {
        if (i == 5)
        {
            continue;
        }
        printf(&quot;i = %d\n&quot;, i);
    }
    return 0;
}
</code></pre>
<p>如果让你把这个改成<code>while</code>，可能有的小伙伴会这么改：</p>
<pre><code class="language-c">//Example 11 V2
#include &lt;stdio.h&gt;
int main(void)
{
    int i = 1;
    while (i &lt; 10)
    {
        if ( i == 5)
        {
            continue;
            i++;
        }
        printf(&quot;i = %d\n&quot;, i);
        i++;
    }
}
</code></pre>
<p>这么看起来好像没有问题，但是执行到<code>continue</code>的时候，程序就陷入了<strong>死循环</strong>，无法执行到<code>i++</code>。因此不要随意更改已有的循环，如果真的有需要去改，也一定要思考清楚逻辑，想当然多半是会犯错误的。</p>
<h2 id="逗号运算符">逗号运算符</h2>
<p>当某个部分需要多个表达式的时候，使用逗号运算符来拼接。逗号运算符的优先级是<strong>最低</strong>的，但是它可以<strong>使整体</strong>从左到右进行。比如：</p>
<pre><code class="language-c">//Example 12
#include &lt;stdio.h&gt;
int main(void)
{
    int a,b,c;
    a = (b = 3, (c = b + 4) + 5);
    printf(&quot;a = %d, b = %d, c = %d\n&quot;, a, b, c);
    return 0;
}
</code></pre>
<p>在第6行里面。虽然<code>c = b + 4</code>被优先级最高的小括号括了起来，但是由于逗号运算符，还是优先从<code>b = 3</code>开始执行。</p>
<h2 id="条件运算符">条件运算符</h2>
<p>在C语言中，还有一种分支表达式就是条件运算符，它的通式为<code>exp1?exp2:exp3;</code>，其中exp1是<strong>条件表达式</strong>，当这个表达式判断为<strong>真</strong>时，执行exp2，反之执行exp3。比如下面的分支：</p>
<pre><code class="language-c">//Example 13
#include &lt;stdio.h&gt;
int main(void)
{
    int a = 3,b = 2;
    if (a &gt; b)
    {
        printf(&quot;Max is a\n&quot;);
    }
    else
    {
        printf(&quot;Max is b\n&quot;);
    }
    return 0;
}
</code></pre>
<p>这个就可以改成：</p>
<pre><code class="language-c">//Example 13 V2
#include &lt;stdio.h&gt;
int main(void)
{
    int a = 3,b = 2;
    a &gt; b ? printf(&quot;Max is a\n&quot;):printf(&quot;Max is b\n&quot;);
    return 0;
}
</code></pre>
<p>在条件不复杂的情况下使用这种语句其实更加方便，具体还是看个人的习惯来使用。</p>
<h2 id="goto语句">goto语句</h2>
<p>goto语句其实是个历史遗留问题。早期的编程语言都有<strong>汇编语言</strong>留下来的痕迹，goto就是其中之一。goto的作用就是让程序直接跳转到指定的位置。比如：</p>
<pre><code class="language-c">//Example 14
#include &lt;stdio.h&gt;
int main(void)
{
    int i = 5;
    while (i++)
    {
        if (i &gt; 10)
        {
            goto Lable;
        }
    }
Lable: printf(&quot;Here, i = %d\n&quot;, i);
    return 0;
}
</code></pre>
<p>当<code>i&gt;10</code>的时候直接跳转到<code>Lable</code>处了。</p>
<p>很多初学者刚刚接触<code>goto</code>的时候可能会觉得很实用，但是提醒大家，在实际开发的过程中，<strong>最好不用</strong><code>goto</code>语句。因为在代码之间跳来跳去，会破坏程序原有的逻辑。早期的程序代码就是满篇的<code>goto</code>，没有强大的大脑，很难一次性看懂代码在讲什么。所以早期的程序员还真不是一般人能揽下的活儿。</p>
<p>但是，有一种情况可以使用，就是要<strong>一次性跳出多层循环</strong>的时候，使用<code>goto</code>会更加直观，比多个<code>break</code>好用。</p>
<h2 id="嵌套循环">嵌套循环</h2>
<p>刚刚讲过，在实际的开发中，多层嵌套循环是会经常出现的。那么，在这里我们举个简单的例子来说明下，输出九九乘法表：</p>
<pre><code class="language-c">//Example 15
#include &lt;stdio.h&gt;
int main(void)
{
    int i,j;
    for (i=1; i&lt;=9; i++)
    {
        for (j=1; j&lt;=i; j++)
        {
            printf(&quot;%d×%d=%-2d\t&quot;, i, j, i*j);
        }
        putchar('\n');
    }
    return 0;
}
</code></pre>
<p>输出结果：</p>
<pre><code>//Consequence 15
1×1=1
2×1=2   2×2=4
3×1=3   3×2=6   3×3=9
4×1=4   4×2=8   4×3=12  4×4=16
5×1=5   5×2=10  5×3=15  5×4=20  5×5=25
6×1=6   6×2=12  6×3=18  6×4=24  6×5=30  6×6=36
7×1=7   7×2=14  7×3=21  7×4=28  7×5=35  7×6=42  7×7=49
8×1=8   8×2=16  8×3=24  8×4=32  8×5=40  8×6=48  8×7=56  8×8=64
9×1=9   9×2=18  9×3=27  9×4=36  9×5=45  9×6=54  9×7=63  9×8=72  9×9=81
</code></pre>
<hr>
<p>以上就是分支与循环的基础知识了，如果觉得学会了，那就赶紧开始实践。只有通过不断的debug，才能提升自己！这期博客就到此结束啦，是目前为止最长的一篇博客了，下期见！</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[C语言运算符优先级及ASCII对照表]]></title>
        <id>https://harriswilde.github.io/post/COperatorASCII</id>
        <link href="https://harriswilde.github.io/post/COperatorASCII">
        </link>
        <updated>2019-11-04T11:21:06.000Z</updated>
        <content type="html"><![CDATA[<h1 id="运算符优先级">运算符优先级</h1>
<table>
<thead>
<tr>
<th>优先级</th>
<th>运算符</th>
<th>结合律</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>后缀运算符：<code>[]</code>   <code>()</code>   <code>·</code>   <code>-&gt;</code>   <code>++</code>   <code>--</code>  <code>(类型名称){列表}</code></td>
<td>从左到右</td>
</tr>
<tr>
<td>2</td>
<td>一元运算符：<code>++</code>   <code>--</code>   <code>!</code>   <code>~</code>   <code>+</code>   <code>-</code>   <code>*</code>   <code>&amp;</code>   <code>sizeof</code>  <code>_Alignof</code></td>
<td>从右到左</td>
</tr>
<tr>
<td>3</td>
<td>类型转换运算符：<code>(类型名称)</code></td>
<td>从右到左</td>
</tr>
<tr>
<td>4</td>
<td>乘除法运算符：<code>*</code>   <code>/</code>   <code>%</code></td>
<td>从左到右</td>
</tr>
<tr>
<td>5</td>
<td>加减法运算符：<code>+</code>   <code>-</code></td>
<td>从左到右</td>
</tr>
<tr>
<td>6</td>
<td>移位运算符：<code>&lt;&lt;</code>   <code>&gt;&gt;</code></td>
<td>从左到右</td>
</tr>
<tr>
<td>7</td>
<td>关系运算符：<code>&lt;&lt;=</code>   <code>&gt;&gt;=</code></td>
<td>从左到右</td>
</tr>
<tr>
<td>8</td>
<td>相等运算符：<code>==</code>   <code>!=</code></td>
<td>从左到右</td>
</tr>
<tr>
<td>9</td>
<td>位运算符 AND：<code>&amp;</code></td>
<td>从左到右</td>
</tr>
<tr>
<td>10</td>
<td>位运算符 XOR：<code>^</code></td>
<td>从左到右</td>
</tr>
<tr>
<td>11</td>
<td>位运算符 OR：<code>|</code></td>
<td>从左到右</td>
</tr>
<tr>
<td>12</td>
<td>逻辑运算符 AND：<code>&amp;&amp;</code></td>
<td>从左到右</td>
</tr>
<tr>
<td>13</td>
<td>逻辑运算符 OR：<code>||</code></td>
<td>从左到右</td>
</tr>
<tr>
<td>14</td>
<td>条件运算符：<code>?:</code></td>
<td>从右到左</td>
</tr>
<tr>
<td>15</td>
<td>赋值运算符：     <code>=</code>     <code>+=</code>     <code>-=</code>    <code>*=</code>    <code>/=</code>    <code>%=</code>    <code>&amp;=</code>    <code>^=</code>    <code>|=</code>      <code>&lt;&lt;=</code>    <code>&gt;&gt;=</code></td>
<td>从右到左</td>
</tr>
<tr>
<td>16</td>
<td>逗号运算符：<code>,</code></td>
<td>从左到右</td>
</tr>
</tbody>
</table>
<ol>
<li>
<p>优先级1中的运算符中的最后一个<code>（类型名称）{列表}</code>是 C99 新增加的。</p>
</li>
<li>
<p>一些运算符记号在其中出现了两次。例如，自增运算符 ++ 和自减运算符 --，在作后缀运算符（如表达式 x++）时，较其用作前缀运算符（如表达式 ++x）时，具有<strong>较高</strong>的优先级。</p>
</li>
<li>
<p>+、-、* 和 &amp; 运算符记号不但可以当作<strong>一元运算符</strong>（unary operator，只需要一个操作数），也可以当作<strong>二元运算符</strong>（binary operator，需要两个操作数）。例如，* 只有一个操作数的时候，就是间接运算符（indirection operator），而有两个操作数的时候，就是乘号。在这些例子中，一元运算符比二元运算符具有<strong>更高</strong>的优先级。例如，表达式 *ptrl**ptr2 等同于表达式（*ptrl）*（*ptr2）。</p>
</li>
</ol>
<hr>
<h1 id="ascii对照表">ASCII对照表</h1>
<p>C语言中默认使用ASCII的编码来存储字符。那么在写代码的过程中，适当了解一点ASCII编码，有利于我们代码的编写。其实不用背下来，用多了自然常用的就熟悉了。</p>
<h2 id="1控制字符">1.控制字符</h2>
<table>
<thead>
<tr>
<th>二进制</th>
<th>十进制</th>
<th>十六进制</th>
<th>缩写</th>
<th>名称/意义</th>
</tr>
</thead>
<tbody>
<tr>
<td>0000 0000</td>
<td>0</td>
<td>00</td>
<td>NUL</td>
<td>空字符（Null）</td>
</tr>
<tr>
<td>0000 0001</td>
<td>1</td>
<td>01</td>
<td>SOH</td>
<td>标题开始</td>
</tr>
<tr>
<td>0000 0010</td>
<td>2</td>
<td>02</td>
<td>STX</td>
<td>本文开始</td>
</tr>
<tr>
<td>0000 0011</td>
<td>3</td>
<td>03</td>
<td>ETX</td>
<td>本文结束</td>
</tr>
<tr>
<td>0000 0100</td>
<td>4</td>
<td>04</td>
<td>EOT</td>
<td>传输结束</td>
</tr>
<tr>
<td>0000 0101</td>
<td>5</td>
<td>05</td>
<td>ENQ</td>
<td>请求</td>
</tr>
<tr>
<td>0000 0110</td>
<td>6</td>
<td>06</td>
<td>ACK</td>
<td>确认回应</td>
</tr>
<tr>
<td>0000 0111</td>
<td>7</td>
<td>07</td>
<td>BEL</td>
<td>响铃</td>
</tr>
<tr>
<td>0000 1000</td>
<td>8</td>
<td>08</td>
<td>BS</td>
<td>退格</td>
</tr>
<tr>
<td>0000 1001</td>
<td>9</td>
<td>09</td>
<td>HT</td>
<td>水平定位<br>符号</td>
</tr>
<tr>
<td>0000 1010</td>
<td>10</td>
<td>0A</td>
<td>LF</td>
<td>换行键</td>
</tr>
<tr>
<td>0000 1011</td>
<td>11</td>
<td>0B</td>
<td>VT</td>
<td>垂直定位<br>符号</td>
</tr>
<tr>
<td>0000 1100</td>
<td>12</td>
<td>0C</td>
<td>FF</td>
<td>换页键</td>
</tr>
<tr>
<td>0000 1101</td>
<td>13</td>
<td>0D</td>
<td>CR</td>
<td>归位键</td>
</tr>
<tr>
<td>0000 1110</td>
<td>14</td>
<td>0E</td>
<td>SO</td>
<td>取消变换<br>（Shift out）</td>
</tr>
<tr>
<td>0000 1111</td>
<td>15</td>
<td>0F</td>
<td>SI</td>
<td>启用变换<br>（Shift in）</td>
</tr>
<tr>
<td>0001 0000</td>
<td>16</td>
<td>10</td>
<td>DLE</td>
<td>跳出数据通讯</td>
</tr>
<tr>
<td>0001 0001</td>
<td>17</td>
<td>11</td>
<td>DC1</td>
<td>设备控制一<br>（XON 启用<br>软件速度<br>控制）</td>
</tr>
<tr>
<td>0001 0010</td>
<td>18</td>
<td>12</td>
<td>DC2</td>
<td>设备控制二</td>
</tr>
<tr>
<td>0001 0011</td>
<td>19</td>
<td>13</td>
<td>DC3</td>
<td>设备控制三<br>（XOFF 停用<br>软件速度<br>控制）</td>
</tr>
<tr>
<td>0001 0100</td>
<td>20</td>
<td>14</td>
<td>DC4</td>
<td>设备控制四</td>
</tr>
<tr>
<td>0001 0101</td>
<td>21</td>
<td>15</td>
<td>NAK</td>
<td>确认失败回应</td>
</tr>
<tr>
<td>0001 0110</td>
<td>22</td>
<td>16</td>
<td>SYN</td>
<td>同步用暂停</td>
</tr>
<tr>
<td>0001 0111</td>
<td>23</td>
<td>17</td>
<td>ETB</td>
<td>区块传输结束</td>
</tr>
<tr>
<td>0001 1000</td>
<td>24</td>
<td>18</td>
<td>CAN</td>
<td>取消</td>
</tr>
<tr>
<td>0001 1001</td>
<td>25</td>
<td>19</td>
<td>EM</td>
<td>连接介质中断</td>
</tr>
<tr>
<td>0001 1010</td>
<td>26</td>
<td>1A</td>
<td>SUB</td>
<td>替换</td>
</tr>
<tr>
<td>0001 1011</td>
<td>27</td>
<td>1B</td>
<td>ESC</td>
<td>跳出</td>
</tr>
<tr>
<td>0001 1100</td>
<td>28</td>
<td>1C</td>
<td>FS</td>
<td>文件分割符</td>
</tr>
<tr>
<td>0001 1101</td>
<td>29</td>
<td>1D</td>
<td>GS</td>
<td>组群分隔符</td>
</tr>
<tr>
<td>0001 1110</td>
<td>30</td>
<td>1E</td>
<td>RS</td>
<td>记录分隔符</td>
</tr>
<tr>
<td>0001 1111</td>
<td>31</td>
<td>1F</td>
<td>US</td>
<td>单元分隔符</td>
</tr>
<tr>
<td>0111 1111</td>
<td>127</td>
<td>7F</td>
<td>DEL</td>
<td>删除</td>
</tr>
</tbody>
</table>
<h2 id="2-显示字符">2. 显示字符</h2>
<table>
<thead>
<tr>
<th>二进制</th>
<th>十进制</th>
<th>十六进制</th>
<th>图形</th>
</tr>
</thead>
<tbody>
<tr>
<td>0010 0000</td>
<td>32</td>
<td>20</td>
<td>空格</td>
</tr>
<tr>
<td>0010 0001</td>
<td>33</td>
<td>21</td>
<td>!</td>
</tr>
<tr>
<td>0010 0010</td>
<td>34</td>
<td>22</td>
<td>&quot;</td>
</tr>
<tr>
<td>0010 0011</td>
<td>35</td>
<td>23</td>
<td>#</td>
</tr>
<tr>
<td>0010 0100</td>
<td>36</td>
<td>24</td>
<td>$</td>
</tr>
<tr>
<td>0010 0101</td>
<td>37</td>
<td>25</td>
<td>%</td>
</tr>
<tr>
<td>0010 0110</td>
<td>38</td>
<td>26</td>
<td>&amp;</td>
</tr>
<tr>
<td>0010 0111</td>
<td>39</td>
<td>27</td>
<td>'</td>
</tr>
<tr>
<td>0010 1000</td>
<td>40</td>
<td>28</td>
<td>(</td>
</tr>
<tr>
<td>0010 1001</td>
<td>41</td>
<td>29</td>
<td>)</td>
</tr>
<tr>
<td>0010 1010</td>
<td>42</td>
<td>2A</td>
<td>*</td>
</tr>
<tr>
<td>0010 1011</td>
<td>43</td>
<td>2B</td>
<td>+</td>
</tr>
<tr>
<td>0010 1100</td>
<td>44</td>
<td>2C</td>
<td>,</td>
</tr>
<tr>
<td>0010 1101</td>
<td>45</td>
<td>2D</td>
<td>-</td>
</tr>
<tr>
<td>0010 1110</td>
<td>46</td>
<td>2E</td>
<td>.</td>
</tr>
<tr>
<td>0010 1111</td>
<td>47</td>
<td>2F</td>
<td>/</td>
</tr>
<tr>
<td>0011 0000</td>
<td>48</td>
<td>30</td>
<td>0</td>
</tr>
<tr>
<td>0011 0001</td>
<td>49</td>
<td>31</td>
<td>1</td>
</tr>
<tr>
<td>0011 0010</td>
<td>50</td>
<td>32</td>
<td>2</td>
</tr>
<tr>
<td>0011 0011</td>
<td>51</td>
<td>33</td>
<td>3</td>
</tr>
<tr>
<td>0011 0100</td>
<td>52</td>
<td>34</td>
<td>4</td>
</tr>
<tr>
<td>0011 0101</td>
<td>53</td>
<td>35</td>
<td>5</td>
</tr>
<tr>
<td>0011 0110</td>
<td>54</td>
<td>36</td>
<td>6</td>
</tr>
<tr>
<td>0011 0111</td>
<td>55</td>
<td>37</td>
<td>7</td>
</tr>
<tr>
<td>0011 1000</td>
<td>56</td>
<td>38</td>
<td>8</td>
</tr>
<tr>
<td>0011 1001</td>
<td>57</td>
<td>39</td>
<td>9</td>
</tr>
<tr>
<td>0011 1010</td>
<td>58</td>
<td>3A</td>
<td>:</td>
</tr>
<tr>
<td>0011 1011</td>
<td>59</td>
<td>3B</td>
<td>;</td>
</tr>
<tr>
<td>0011 1100</td>
<td>60</td>
<td>3C</td>
<td>&lt;</td>
</tr>
<tr>
<td>0011 1101</td>
<td>61</td>
<td>3D</td>
<td>=</td>
</tr>
<tr>
<td>0011 1110</td>
<td>62</td>
<td>3E</td>
<td>&gt;</td>
</tr>
<tr>
<td>0011 1111</td>
<td>63</td>
<td>3F</td>
<td>?</td>
</tr>
<tr>
<td>0100 0000</td>
<td>64</td>
<td>40</td>
<td>@</td>
</tr>
<tr>
<td>0100 0001</td>
<td>65</td>
<td>41</td>
<td>A</td>
</tr>
<tr>
<td>0100 0010</td>
<td>66</td>
<td>42</td>
<td>B</td>
</tr>
<tr>
<td>0100 0011</td>
<td>67</td>
<td>43</td>
<td>C</td>
</tr>
<tr>
<td>0100 0100</td>
<td>68</td>
<td>44</td>
<td>D</td>
</tr>
<tr>
<td>0100 0101</td>
<td>69</td>
<td>45</td>
<td>E</td>
</tr>
<tr>
<td>0100 0110</td>
<td>70</td>
<td>46</td>
<td>F</td>
</tr>
<tr>
<td>0100 0111</td>
<td>71</td>
<td>47</td>
<td>G</td>
</tr>
<tr>
<td>0100 1000</td>
<td>72</td>
<td>48</td>
<td>H</td>
</tr>
<tr>
<td>0100 1001</td>
<td>73</td>
<td>49</td>
<td>I</td>
</tr>
<tr>
<td>0100 1010</td>
<td>74</td>
<td>4A</td>
<td>J</td>
</tr>
<tr>
<td>0100 1011</td>
<td>75</td>
<td>4B</td>
<td>K</td>
</tr>
<tr>
<td>0100 1100</td>
<td>76</td>
<td>4C</td>
<td>L</td>
</tr>
<tr>
<td>0100 1101</td>
<td>77</td>
<td>4D</td>
<td>M</td>
</tr>
<tr>
<td>0100 1110</td>
<td>78</td>
<td>4E</td>
<td>N</td>
</tr>
<tr>
<td>0100 1111</td>
<td>79</td>
<td>4F</td>
<td>O</td>
</tr>
<tr>
<td>0101 0000</td>
<td>80</td>
<td>50</td>
<td>P</td>
</tr>
<tr>
<td>0101 0001</td>
<td>81</td>
<td>51</td>
<td>Q</td>
</tr>
<tr>
<td>0101 0010</td>
<td>82</td>
<td>52</td>
<td>R</td>
</tr>
<tr>
<td>0101 0011</td>
<td>83</td>
<td>53</td>
<td>S</td>
</tr>
<tr>
<td>0101 0100</td>
<td>84</td>
<td>54</td>
<td>T</td>
</tr>
<tr>
<td>0101 0101</td>
<td>85</td>
<td>55</td>
<td>U</td>
</tr>
<tr>
<td>0101 0110</td>
<td>86</td>
<td>56</td>
<td>V</td>
</tr>
<tr>
<td>0101 0111</td>
<td>87</td>
<td>57</td>
<td>W</td>
</tr>
<tr>
<td>0101 1000</td>
<td>88</td>
<td>58</td>
<td>X</td>
</tr>
<tr>
<td>0101 1001</td>
<td>89</td>
<td>59</td>
<td>Y</td>
</tr>
<tr>
<td>0101 1010</td>
<td>90</td>
<td>5A</td>
<td>Z</td>
</tr>
<tr>
<td>0101 1011</td>
<td>91</td>
<td>5B</td>
<td>[</td>
</tr>
<tr>
<td>0101 1100</td>
<td>92</td>
<td>5C</td>
<td>\</td>
</tr>
<tr>
<td>0101 1101</td>
<td>93</td>
<td>5D</td>
<td>]</td>
</tr>
<tr>
<td>0101 1110</td>
<td>94</td>
<td>5E</td>
<td>^</td>
</tr>
<tr>
<td>0101 1111</td>
<td>95</td>
<td>5F</td>
<td>_</td>
</tr>
<tr>
<td>0110 0000</td>
<td>96</td>
<td>60</td>
<td>`</td>
</tr>
<tr>
<td>0110 0001</td>
<td>97</td>
<td>61</td>
<td>a</td>
</tr>
<tr>
<td>0110 0010</td>
<td>98</td>
<td>62</td>
<td>b</td>
</tr>
<tr>
<td>0110 0011</td>
<td>99</td>
<td>63</td>
<td>c</td>
</tr>
<tr>
<td>0110 0100</td>
<td>100</td>
<td>64</td>
<td>d</td>
</tr>
<tr>
<td>0110 0101</td>
<td>101</td>
<td>65</td>
<td>e</td>
</tr>
<tr>
<td>0110 0110</td>
<td>102</td>
<td>66</td>
<td>f</td>
</tr>
<tr>
<td>0110 0111</td>
<td>103</td>
<td>67</td>
<td>g</td>
</tr>
<tr>
<td>0110 1000</td>
<td>104</td>
<td>68</td>
<td>h</td>
</tr>
<tr>
<td>0110 1001</td>
<td>105</td>
<td>69</td>
<td>i</td>
</tr>
<tr>
<td>0110 1010</td>
<td>106</td>
<td>6A</td>
<td>j</td>
</tr>
<tr>
<td>0110 1011</td>
<td>107</td>
<td>6B</td>
<td>k</td>
</tr>
<tr>
<td>0110 1100</td>
<td>108</td>
<td>6C</td>
<td>l</td>
</tr>
<tr>
<td>0110 1101</td>
<td>109</td>
<td>6D</td>
<td>m</td>
</tr>
<tr>
<td>0110 1110</td>
<td>110</td>
<td>6E</td>
<td>n</td>
</tr>
<tr>
<td>0110 1111</td>
<td>111</td>
<td>6F</td>
<td>o</td>
</tr>
<tr>
<td>0111 0000</td>
<td>112</td>
<td>70</td>
<td>p</td>
</tr>
<tr>
<td>0111 0001</td>
<td>113</td>
<td>71</td>
<td>q</td>
</tr>
<tr>
<td>0111 0010</td>
<td>114</td>
<td>72</td>
<td>r</td>
</tr>
<tr>
<td>0111 0011</td>
<td>115</td>
<td>73</td>
<td>s</td>
</tr>
<tr>
<td>0111 0100</td>
<td>116</td>
<td>74</td>
<td>t</td>
</tr>
<tr>
<td>0111 0101</td>
<td>117</td>
<td>75</td>
<td>u</td>
</tr>
<tr>
<td>0111 0110</td>
<td>118</td>
<td>76</td>
<td>v</td>
</tr>
<tr>
<td>0111 0111</td>
<td>119</td>
<td>77</td>
<td>w</td>
</tr>
<tr>
<td>0111 1000</td>
<td>120</td>
<td>78</td>
<td>x</td>
</tr>
<tr>
<td>0111 1001</td>
<td>121</td>
<td>79</td>
<td>y</td>
</tr>
<tr>
<td>0111 1010</td>
<td>122</td>
<td>7A</td>
<td>z</td>
</tr>
<tr>
<td>0111 1011</td>
<td>123</td>
<td>7B</td>
<td>{</td>
</tr>
<tr>
<td>0111 1100</td>
<td>124</td>
<td>7C</td>
<td>|</td>
</tr>
<tr>
<td>0111 1101</td>
<td>125</td>
<td>7D</td>
<td>}</td>
</tr>
<tr>
<td>0111 1110</td>
<td>126</td>
<td>7E</td>
<td>~</td>
</tr>
</tbody>
</table>
<p>不知道大家是否还记得我在<a href="https://harriswilde.github.io/post/CPrintf">《C语言之printf函数的用法》</a>中提到过如下的代码：</p>
<pre><code class="language-c">#include &lt;stdio.h&gt;
int main(void)
{
    char C = 'c';
    printf(&quot;%c=%d&quot;,C,C);
    return 0;
}
</code></pre>
<p>然后，输出结果应该是</p>
<pre><code>c = 99
</code></pre>
<p>大家现在应该就能明白了吧：如果将一个ASCII中有的字符，让其以整数的形式输出的话，是会输出它的ASCII码的。是不是觉得很有意思呢？</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[小数表示法(定点法、浮点法)]]></title>
        <id>https://harriswilde.github.io/post/FixedFloatPoint</id>
        <link href="https://harriswilde.github.io/post/FixedFloatPoint">
        </link>
        <updated>2019-10-22T14:17:03.000Z</updated>
        <content type="html"><![CDATA[<p>在计算机的数据存储里面，常规思路来看，是只能表示<strong>有限位数</strong>的<strong>整数</strong>的。但是，无论是在日常生活中，还是在科学研究领域，小数(<strong>严格来讲应该是分数</strong>)都是不可或缺的部分。那么，如何让计算机能够存储并使用小数呢？这篇文章就带大家一起来了解下两种常用的小数表示法：<strong>定点法</strong>和<strong>浮点法</strong>。</p>
<h1 id="定点数用二进制来表示小数">定点数：用二进制来表示小数</h1>
<p>​		其实，整数和小数的主要区别，我们可以<strong>不规范地</strong>理解为是否存在小数点，对吧？（其实整数也是有小数点的，我们这里暂且这么理解）那么要表示小数，只需要在整数表示的基础上，加一个小数点，不就可以了吗？没错，这就是定点数的思路。</p>
<p>​		<strong>定点数</strong>使用<strong>二进制</strong>，小数点的位置是<strong>事先约定好的</strong>，在使用的过程中<strong>不能改变</strong>，这也是定点数的名称的由来。有的同学可能会问了，那么，小数如何从十进制换成定点数呢？不着急，且看下面的例子：</p>
<p>其实很简单，和整数部分的<strong>完全相反</strong>。连续将小数部分的值<strong>乘以2</strong>，对于每一次得到的数，若整数为0，则<strong>顺序</strong>记下一个0，若整数<strong>突破了1</strong>，则记下1，然后整数部分<strong>重置为0</strong>，小数部分<strong>继续重复</strong>上述操作，<strong>直到</strong>小数部分为0为止。就像下面这样：</p>
<blockquote>
<p>十进制的0.125</p>
<p>0.125*2=0.25 （记下0）</p>
<p>0.25*2=0.5 （记下0，则目前为00）</p>
<p>0.5*2=1.0 （整数部分为1，记下1，则目前为001）</p>
<p>小数部分为0，转换结束（这里是刚好结束，若整数位进一后小数部分还有剩余，则把整数部分变成0再继续重复上面的算法）</p>
<p>则十进制0.125的二进制形式为0.001</p>
</blockquote>
<p><strong>二进制转十进制：</strong></p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>101.01</mn><msub><mn>1</mn><mrow><mo>(</mo><mn>2</mn><mo>)</mo></mrow></msub></mrow><annotation encoding="application/x-tex">101.011_{(2)}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9996399999999999em;vertical-align:-0.3551999999999999em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">1</span><span class="mord">.</span><span class="mord">0</span><span class="mord">1</span><span class="mord"><span class="mord">1</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.34480000000000005em;"><span style="top:-2.5198em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mtight">2</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3551999999999999em;"><span></span></span></span></span></span></span></span></span></span></span></p>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>=</mo><mn>1</mn><mo>∗</mo><msup><mn>2</mn><mn>2</mn></msup><mo>+</mo><mn>0</mn><mo>∗</mo><msup><mn>2</mn><mn>1</mn></msup><mo>+</mo><mn>1</mn><mo>∗</mo><msup><mn>2</mn><mn>0</mn></msup><mo>+</mo><mn>0</mn><mo>∗</mo><msup><mn>2</mn><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo>+</mo><mn>1</mn><mo>∗</mo><msup><mn>2</mn><mrow><mo>−</mo><mn>2</mn></mrow></msup><mo>+</mo><mn>1</mn><mo>∗</mo><msup><mn>2</mn><mrow><mo>−</mo><mn>3</mn></mrow></msup></mrow><annotation encoding="application/x-tex">=1*2^2+0*2^1+1*2^0+0*2^{-1}+1*2^{-2}+1*2^{-3}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">3</span></span></span></span></span></span></span></span></span></span></span></span></p>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>=</mo><mn>5</mn><mfrac><mn>3</mn><mn>8</mn></mfrac></mrow><annotation encoding="application/x-tex">=5\frac{3}{8}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="mord">5</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">8</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></p>
<p>​		看懂了吧，从小数点开始<strong>往右数</strong>，第一位小数的位权为-1，后面-2，-3以此类推。</p>
<p>​		二进制小数点向左移动一位，相当于这个数的数值<strong>除以</strong>2；相反，向右移动一位就是<strong>乘以</strong>2。</p>
<p>​		一般在现在计算机的应用中，定点数一般只有两种情况，第一种是小数点在<strong>符号位之后</strong>，也就是表示<strong>纯小数</strong>，第二种是在<strong>最后</strong>，也就是表示<strong>整数</strong>。这种表示方法的范围并不大，如果需要表示类似于<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn><mo>∗</mo><mn>1</mn><msup><mn>0</mn><mn>100</mn></msup></mrow><annotation encoding="application/x-tex">2*10^{100}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">0</span><span class="mord mtight">0</span></span></span></span></span></span></span></span></span></span></span></span>这样的数值的话，那么用定点数的话就会占很大的空间。（毕竟你要很多很多个0才行，对吧）于是乎，我们的先人又开始秀智商了。</p>
<h1 id="浮点数表示更大范围的小数">浮点数：表示更大范围的小数</h1>
<p>​		上面的例子我们已经看到了定点数的局限性，于是，先人们就祭出了浮点数大法，来让我们更好地表示数(tuō)字(fà)。</p>
<p>​		如果上面的例子还不能够说服你的话，我下面再举个栗子：</p>
<blockquote>
<p>表示一组数，0.123，1.23，12.3，123</p>
</blockquote>
<p>​		如果此时你用定点数来表示的话，你会发现，这四组数字的表示方法<strong>完全不同</strong>。但是，我们的数学经验却又告诉我们，这几个数字其实是可以用一种<strong>通式</strong>来表示的，你应该已经想到了，就是<strong>科学计数法</strong>。如果使用科学计数法，那么这几组数字的通式可以表示为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0.123</mn><mo>∗</mo><mn>1</mn><msup><mn>0</mn><mi>n</mi></msup></mrow><annotation encoding="application/x-tex">0.123*10^n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">1</span><span class="mord">2</span><span class="mord">3</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.664392em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span></span></span></span>。貌似比什么定点数方便多了。</p>
<p>​		但是，我们知道，计算机是用来处理二进制的，那么，我们在二进制里面，可不可以打造一套<strong>类似于科学计数法</strong>的思路来表示小数呢——这就是浮点数的基本思路。浮点数的表示方法<strong>有点类似</strong>科学计数法，但是又比科学计数法要复杂。</p>
<p>​		不多废话，我们来看看到底有什么猫腻。</p>
<p>​		在IEEE 754中，规定了浮点数用以下形式来表示：<strong><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>V</mi><mo>=</mo><mo>(</mo><mo>−</mo><mn>1</mn><msup><mo>)</mo><mi>S</mi></msup><mo>∗</mo><mi>M</mi><mo>∗</mo><msup><mn>2</mn><mi>E</mi></msup></mrow><annotation encoding="application/x-tex">V=(-1)^S*M*2^E</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.0913309999999998em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">−</span><span class="mord">1</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05764em;">S</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8413309999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05764em;">E</span></span></span></span></span></span></span></span></span></span></span></strong></p>
<p>​		有点懵？先不着急，首先这个公式的三个部分，分别是<code>符号位*尾数*阶码</code></p>
<ul>
<li>符号位(Sign)：决定这个数是正数(S=0)还是负数(S=1)；</li>
<li>尾数(Frac)：决定这个数的精度以及主体部分，这里采用定点法表示；</li>
<li>阶码(Exp)：决定这个数的范围，它是一个加权值，权重是2的E次幂。</li>
</ul>
<p>浮点数常用的有两种：单精度浮点数和双精度浮点数。</p>
<blockquote>
<p>单精度浮点数用32bit来存储，其结构如下：</p>
<p>| S(1bit) || Exp(8bit) || Frac(23bit) |</p>
</blockquote>
<blockquote>
<p>而双精度浮点则使用64bit来存储，结构如下：</p>
<p>| S(1bit) || Exp(11bit) || Frac(52bit) |</p>
</blockquote>
<p>​		我们现在知道了浮点数的封装结构，那我们接下来来了解下它是如何表示小数的。</p>
<ul>
<li>
<p>规格化的值</p>
<p>当Exp字段<strong>不全为0</strong>或<strong>不全为1</strong>时，表示的就是规格化的值。这几乎表示了<strong>绝大部分</strong>日常浮点数的情况。</p>
<p>此时，阶码使用<strong>移码</strong>来表示。什么是移码呢？我们要知道，Exp字段是表示<strong>无符号数字</strong>的，这样更方便计算(不用涉及到反码什么的)。但是，我们日常生活中，指数是可能为负数的，对吧？那么如何使用无符号的数字来表示有符号的数字呢？很简单，加个<strong>偏移量</strong>就行了。比如我们现在要表示-5到+5的数字，但是我们必须要用无符号来表达，那么很自然，我们把这里面所有的数字都加个5，变成了0到10，那么系统要调用的时候，再把每个值都减去5即可。这个<strong>5</strong>实际上就是<strong>偏移量</strong>。那么这个偏移量我们怎么知道呢？记住公式即可<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>B</mi><mi>i</mi><mi>a</mi><mi>s</mi><mo>=</mo><msup><mn>2</mn><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">Bias=2^{n-1}-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mord mathdefault">i</span><span class="mord mathdefault">a</span><span class="mord mathdefault">s</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>，其中Bias就是<strong>偏移量</strong>。既然都讲到了Exp字段，自然是要来算指数了，那么指数E该怎么求出？还是公式：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>E</mi><mo>=</mo><mi>E</mi><mi>x</mi><mi>p</mi><mo>−</mo><mi>B</mi><mi>i</mi><mi>a</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">E=Exp-Bias</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mord mathdefault">x</span><span class="mord mathdefault">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mord mathdefault">i</span><span class="mord mathdefault">a</span><span class="mord mathdefault">s</span></span></span></span>，直接减去偏移量即可。</p>
<p>而Frac则用来表示<strong>尾数</strong>的(用<strong>定点数</strong>的方式表达，<strong>纯小数</strong>)。尾数定为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>M</mi><mo>=</mo><mn>1</mn><mo>+</mo><mi>F</mi><mi>r</mi><mi>a</mi><mi>c</mi></mrow><annotation encoding="application/x-tex">M=1+Frac</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">a</span><span class="mord mathdefault">c</span></span></span></span>，你可以理解为这种情况下，尾数中的1是白送的，加上去即可。</p>
</li>
<li>
<p>非规格化的值</p>
<p>当Exp字段<strong>全部为0</strong>时，就是非规格化的值，此时<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>E</mi><mo>=</mo><mn>1</mn><mo>−</mo><mi>B</mi><mi>i</mi><mi>a</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">E=1-Bias</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mord mathdefault">i</span><span class="mord mathdefault">a</span><span class="mord mathdefault">s</span></span></span></span>，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>M</mi><mo>=</mo><mi>F</mi><mi>r</mi><mi>a</mi><mi>c</mi></mrow><annotation encoding="application/x-tex">M=Frac</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">a</span><span class="mord mathdefault">c</span></span></span></span>。此刻，尾数的值<strong>就是</strong>小数的值，整数部分不是1而是0，这种情况用于表示<strong>很接近</strong>0.0的小数。</p>
</li>
<li>
<p>无穷大</p>
<p>当Exp字段<strong>全为1</strong>且Frac字段<strong>全为0</strong>时，则表示无穷大。若<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">S=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>则表示<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>+</mo><mi mathvariant="normal">∞</mi></mrow><annotation encoding="application/x-tex">+\infty</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">+</span><span class="mord">∞</span></span></span></span>，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">S=1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>则表示<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>−</mo><mi mathvariant="normal">∞</mi></mrow><annotation encoding="application/x-tex">-\infty</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">−</span><span class="mord">∞</span></span></span></span>。</p>
</li>
<li>
<p>NaN(Not a Number)</p>
<p>在无穷大的情况下<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>F</mi><mi>r</mi><mi>a</mi><mi>c</mi><mi mathvariant="normal">≠</mi><mn>0</mn></mrow><annotation encoding="application/x-tex">Frac\neq0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">a</span><span class="mord mathdefault">c</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel"><span class="mrel"><span class="mord"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="rlap"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="inner"><span class="mrel"></span></span><span class="fix"></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span></span><span class="mrel">=</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>时，表示<strong>不是实数</strong>或者<strong>不能使用无穷大表示</strong>的情况。</p>
</li>
</ul>
<p>说了那么多，大家估计也有点晕了，我们不妨再来两个栗子看看到底该怎么使用上述的方法。</p>
<hr>
<p>先看看浮点数转为我们能看得懂的小数。</p>
<p>某天，Harris碰到了一个浮点数</p>
<p><code>1 01111100 11100000000000000000000</code></p>
<p>首先我们看到<strong>符号位</strong>，是1，说明这玩意儿是个<strong>负数</strong>，再看看阶码，杂乱无章，想必就是<strong>规格化的值</strong>了。好的，套方法。先把尾数转化</p>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>∗</mo><msup><mn>2</mn><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo>+</mo><mn>1</mn><mo>∗</mo><msup><mn>2</mn><mrow><mo>−</mo><mn>2</mn></mrow></msup><mo>+</mo><mn>1</mn><mo>∗</mo><msup><mn>2</mn><mrow><mo>−</mo><mn>3</mn></mrow></msup><mo>=</mo><mfrac><mn>7</mn><mn>8</mn></mfrac></mrow><annotation encoding="application/x-tex">1*2^{-1}+1*2^{-2}+1*2^{-3}=\frac{7}{8}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">3</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">8</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">7</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>，再白嫖个1，那么就是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mfrac><mn>7</mn><mn>8</mn></mfrac></mrow><annotation encoding="application/x-tex">1\frac{7}{8}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="mord">1</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">8</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">7</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>。尾数部分搞定了，再看看指数。</p>
<p>偏移量<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>=</mo><msup><mn>2</mn><mrow><mn>8</mn><mo>−</mo><mn>1</mn></mrow></msup><mo>−</mo><mn>1</mn><mo>=</mo><mn>127</mn></mrow><annotation encoding="application/x-tex">=2^{8-1}-1=127</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">8</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">2</span><span class="mord">7</span></span></span></span>，指数E于是就顺水推舟<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>E</mi><mo>=</mo><mn>0111110</mn><msub><mn>0</mn><mrow><mo>(</mo><mn>2</mn><mo>)</mo></mrow></msub><mo>−</mo><mn>12</mn><msub><mn>7</mn><mrow><mo>(</mo><mn>10</mn><mo>)</mo></mrow></msub><mo>=</mo><mn>124</mn><mo>−</mo><mn>127</mn><mo>=</mo><mo>−</mo><mn>3</mn></mrow><annotation encoding="application/x-tex">E=01111100_{(2)}-127_{(10)}=124-127=-3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.9996399999999999em;vertical-align:-0.3551999999999999em;"></span><span class="mord">0</span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mord">0</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.34480000000000005em;"><span style="top:-2.5198em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mtight">2</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3551999999999999em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.9996399999999999em;vertical-align:-0.3551999999999999em;"></span><span class="mord">1</span><span class="mord">2</span><span class="mord"><span class="mord">7</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.34480000000000005em;"><span style="top:-2.5198em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mtight">1</span><span class="mord mtight">0</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3551999999999999em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mord">2</span><span class="mord">4</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">2</span><span class="mord">7</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">−</span><span class="mord">3</span></span></span></span></p>
<p>再利用上述的公式<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">‬</mi><mi>V</mi><mo>=</mo><mo>(</mo><mo>−</mo><mn>1</mn><msup><mo>)</mo><mi>S</mi></msup><mo>∗</mo><mi>M</mi><mo>∗</mo><msup><mn>2</mn><mi>E</mi></msup><mo>=</mo><mo>(</mo><mo>−</mo><mn>1</mn><msup><mo>)</mo><mn>1</mn></msup><mo>∗</mo><mn>1</mn><mfrac><mn>7</mn><mn>8</mn></mfrac><mo>∗</mo><msup><mn>2</mn><mrow><mo>−</mo><mn>3</mn></mrow></msup><mo>=</mo><mo>−</mo><mfrac><mn>15</mn><mn>64</mn></mfrac><mo>=</mo><mo>−</mo><mn>0.234375</mn><mi mathvariant="normal">‬</mi></mrow><annotation encoding="application/x-tex">‬V=(-1)^S*M*2^E=(-1)^1*1\frac{7}{8}*2^{-3}=-\frac{15}{64}=-0.234375‬</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">‬</span><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.0913309999999998em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">−</span><span class="mord">1</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05764em;">S</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8413309999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05764em;">E</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">−</span><span class="mord">1</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="mord">1</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">8</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">7</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">3</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="mord">−</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">6</span><span class="mord mtight">4</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">5</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">−</span><span class="mord">0</span><span class="mord">.</span><span class="mord">2</span><span class="mord">3</span><span class="mord">4</span><span class="mord">3</span><span class="mord">7</span><span class="mord">5</span><span class="mord">‬</span></span></span></span></p>
<hr>
<p>上述方法大家应该都能看懂，我们再来看看我们常用的十进制小数如何转化成浮点数表示。</p>
<p>来个简单点的，就3.125吧。</p>
<p>首先，我们将这个小数用<strong>定点数</strong>的方法表示出来</p>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>3.12</mn><msub><mn>5</mn><mrow><mo>(</mo><mn>10</mn><mo>)</mo></mrow></msub></mrow><annotation encoding="application/x-tex">3.125_{(10)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9996399999999999em;vertical-align:-0.3551999999999999em;"></span><span class="mord">3</span><span class="mord">.</span><span class="mord">1</span><span class="mord">2</span><span class="mord"><span class="mord">5</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.34480000000000005em;"><span style="top:-2.5198em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mtight">1</span><span class="mord mtight">0</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3551999999999999em;"><span></span></span></span></span></span></span></span></span></span></p>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>=</mo><mn>11.00</mn><msub><mn>1</mn><mrow><mo>(</mo><mn>2</mn><mo>)</mo></mrow></msub></mrow><annotation encoding="application/x-tex">=11.001_{(2)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.9996399999999999em;vertical-align:-0.3551999999999999em;"></span><span class="mord">1</span><span class="mord">1</span><span class="mord">.</span><span class="mord">0</span><span class="mord">0</span><span class="mord"><span class="mord">1</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.34480000000000005em;"><span style="top:-2.5198em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mtight">2</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3551999999999999em;"><span></span></span></span></span></span></span></span></span></span></p>
<p>完成转换之后，我们可以得到<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>11.00</mn><msub><mn>1</mn><mrow><mo>(</mo><mn>2</mn><mo>)</mo></mrow></msub><mo>=</mo><mn>1.1001</mn><mo>∗</mo><msup><mn>2</mn><mn>1</mn></msup></mrow><annotation encoding="application/x-tex">11.001_{(2)}=1.1001*2^1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9996399999999999em;vertical-align:-0.3551999999999999em;"></span><span class="mord">1</span><span class="mord">1</span><span class="mord">.</span><span class="mord">0</span><span class="mord">0</span><span class="mord"><span class="mord">1</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.34480000000000005em;"><span style="top:-2.5198em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mtight">2</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3551999999999999em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">.</span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span>,于是E就等于了1，尾数部分把<strong>白嫖的1</strong>还回去<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>F</mi><mi>r</mi><mi>a</mi><mi>c</mi><mo>=</mo><mi>M</mi><mo>−</mo><mn>1</mn><mo>=</mo><mn>1.1001</mn><mo>−</mo><mn>1</mn><mo>=</mo><mn>0.10010000000000000000000</mn></mrow><annotation encoding="application/x-tex">Frac=M-1=1.1001-1=0.10010000000000000000000</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">a</span><span class="mord mathdefault">c</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mord">.</span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span></span></span></span></p>
<p>假设我们转换成<strong>单精度浮点</strong>，则偏移量<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>B</mi><mi>i</mi><mi>a</mi><mi>s</mi><mo>=</mo><msup><mn>2</mn><mrow><mn>8</mn><mo>−</mo><mn>1</mn></mrow></msup><mo>−</mo><mn>1</mn><mo>=</mo><mn>127</mn></mrow><annotation encoding="application/x-tex">Bias=2^{8-1}-1=127</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mord mathdefault">i</span><span class="mord mathdefault">a</span><span class="mord mathdefault">s</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">8</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">2</span><span class="mord">7</span></span></span></span>，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">‭</mi><mi mathvariant="normal">‬</mi><mi>E</mi><mi>x</mi><mi>p</mi><mo>=</mo><mi>E</mi><mo>+</mo><mi>B</mi><mi>i</mi><mi>a</mi><mi>s</mi><mo>=</mo><mn>1</mn><mo>+</mo><mn>127</mn><mo>=</mo><mn>12</mn><msub><mn>8</mn><mrow><mo>(</mo><mn>10</mn><mo>)</mo></mrow></msub><mo>=</mo><mi mathvariant="normal">‭</mi><mn>1000000</mn><msub><mn>0</mn><mrow><mo>(</mo><mn>2</mn><mo>)</mo></mrow></msub><mi mathvariant="normal">‬</mi></mrow><annotation encoding="application/x-tex">‭‬Exp=E+Bias=1+127=128_{(10)}=‭10000000_{(2)}‬</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord">‭</span><span class="mord">‬</span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mord mathdefault">x</span><span class="mord mathdefault">p</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mord mathdefault">i</span><span class="mord mathdefault">a</span><span class="mord mathdefault">s</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">2</span><span class="mord">7</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.9996399999999999em;vertical-align:-0.3551999999999999em;"></span><span class="mord">1</span><span class="mord">2</span><span class="mord"><span class="mord">8</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.34480000000000005em;"><span style="top:-2.5198em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mtight">1</span><span class="mord mtight">0</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3551999999999999em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.9996399999999999em;vertical-align:-0.3551999999999999em;"></span><span class="mord">‭</span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.34480000000000005em;"><span style="top:-2.5198em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mtight">2</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3551999999999999em;"><span></span></span></span></span></span></span><span class="mord">‬</span></span></span></span></p>
<p>又由于这货是个<strong>正数</strong>，符号位是0，于是，浮点数表示就出来啦：</p>
<p><code>0 10000000 10010000000000000000000</code></p>
<p>其实还是挺简单的，对吧？</p>
<hr>
<p>​		好啦，今天的博客就到此结束了。这期实在是有点丰富，所以，一次性理解不了没关系，多自己在纸上写写，也许就开窍了呢？</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[进制转换以及原、反、补码]]></title>
        <id>https://harriswilde.github.io/post/CodeTrans</id>
        <link href="https://harriswilde.github.io/post/CodeTrans">
        </link>
        <updated>2019-10-15T11:13:22.000Z</updated>
        <content type="html"><![CDATA[<p>可能有的小伙伴不理解了：为啥这节讲这些呢，不应该先把语法什么的学习一下吗？</p>
<p>在之前的文章里面讲过，C语言的学习是需要了解一点计算机工作原理的。可能在初学时期用不到，但是如果真的要深入研究的话，是绝对避免不了的。况且这节的内容其实比较简单，我们不如先把它了解了，方便日后我们的进阶学习。</p>
<p>学习编程，尤其是底层编程，进制转换是一个避免不了的话题。其实我们仔细去观察，发现其实是有不少规律可循的。</p>
<hr>
<h1 id="进制转换">进制转换</h1>
<ol>
<li>
<p>二进制 -&gt; 十进制</p>
<p>这个方法就四个字：<code>按权相加</code></p>
<p>我们先来了解下<strong>位权</strong>的概念，举个栗子你就明白啦：</p>
<table>
<thead>
<tr>
<th style="text-align:center">二进制数</th>
<th style="text-align:center">00101011</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">对应位权</td>
<td style="text-align:center">76543210</td>
</tr>
</tbody>
</table>
<p>于是就有了方法：</p>
<blockquote>
<p>十进制 = 依次将每个二进制位的值乘以2的位权次方再相加</p>
</blockquote>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0010101</mn><msub><mn>1</mn><mrow><mo>(</mo><mn>2</mn><mo>)</mo></mrow></msub></mrow><annotation encoding="application/x-tex">00101011_{(2)}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9996399999999999em;vertical-align:-0.3551999999999999em;"></span><span class="mord">0</span><span class="mord">0</span><span class="mord">1</span><span class="mord">0</span><span class="mord">1</span><span class="mord">0</span><span class="mord">1</span><span class="mord"><span class="mord">1</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.34480000000000005em;"><span style="top:-2.5198em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mtight">2</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3551999999999999em;"><span></span></span></span></span></span></span></span></span></span></span></p>
<p>= <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn><mo>∗</mo><msup><mn>2</mn><mn>7</mn></msup></mrow><annotation encoding="application/x-tex">0*2^7</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">7</span></span></span></span></span></span></span></span></span></span></span> + <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn><mo>∗</mo><msup><mn>2</mn><mn>6</mn></msup></mrow><annotation encoding="application/x-tex">0*2^6</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">6</span></span></span></span></span></span></span></span></span></span></span> + <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>∗</mo><msup><mn>2</mn><mn>5</mn></msup></mrow><annotation encoding="application/x-tex">1*2^5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span></span></span></span></span></span></span></span> + <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn><mo>∗</mo><msup><mn>2</mn><mn>4</mn></msup></mrow><annotation encoding="application/x-tex">0*2^4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span></span></span></span></span></span></span></span> + <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>∗</mo><msup><mn>2</mn><mn>3</mn></msup></mrow><annotation encoding="application/x-tex">1*2^3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span></span></span></span> + <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn><mo>∗</mo><msup><mn>2</mn><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">0*2^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span> + <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>∗</mo><msup><mn>2</mn><mn>1</mn></msup></mrow><annotation encoding="application/x-tex">1*2^1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span> + <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>∗</mo><msup><mn>2</mn><mn>0</mn></msup></mrow><annotation encoding="application/x-tex">1*2^0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span></span></span></span></span></span></span></span></p>
<p>= 42</p>
<p>另外说明一下：按权相加适用于<strong>任何进制</strong>的数到<strong>十进制</strong>的数的转换哟！</p>
</li>
<li>
<p>二进制(补码) -&gt; 十进制</p>
<p>如果<strong>符号位</strong>为0，那就和上面一种情况一样。</p>
<p>如果<strong>符号位</strong>为1，则此时符号位的<strong>位权不变</strong>，但该位的<strong>权值</strong>应该乘以**-1**，如：</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1011110</mn><msub><mn>0</mn><mrow><mo>(</mo><mn>2</mn><mo>)</mo></mrow></msub></mrow><annotation encoding="application/x-tex">10111100_{(2)}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9996399999999999em;vertical-align:-0.3551999999999999em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mord">0</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.34480000000000005em;"><span style="top:-2.5198em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mtight">2</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3551999999999999em;"><span></span></span></span></span></span></span></span></span></span></span></p>
<p>= <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>−</mo><mn>1</mn><mo>∗</mo><msup><mn>2</mn><mn>7</mn></msup><mo>+</mo><mn>0</mn><mo>∗</mo><msup><mn>2</mn><mn>6</mn></msup><mo>+</mo><mn>1</mn><mo>∗</mo><msup><mn>2</mn><mn>5</mn></msup><mo>+</mo><mn>1</mn><mo>∗</mo><msup><mn>2</mn><mn>4</mn></msup><mo>+</mo><mn>1</mn><mo>∗</mo><msup><mn>2</mn><mn>3</mn></msup><mo>+</mo><mn>1</mn><mo>∗</mo><msup><mn>2</mn><mn>2</mn></msup><mo>+</mo><mn>0</mn><mo>∗</mo><msup><mn>2</mn><mn>1</mn></msup><mo>+</mo><mn>0</mn><mo>∗</mo><msup><mn>2</mn><mn>0</mn></msup></mrow><annotation encoding="application/x-tex">-1*2^{7} + 0*2^{6} + 1*2^{5} + 1*2^{4} + 1*2^{3} + 1*2^{2} + 0*2^{1} + 0*2^{0}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">−</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">7</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">6</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">5</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">4</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span></span></span></span></span></span></span></span></p>
<p>= -68</p>
<p>大家可能看懵了，啥是<strong>符号位</strong>？<strong>补码</strong>又是啥？别急，后面且听我娓娓道来。</p>
</li>
<li>
<p>十进制 -&gt; 二进制</p>
<p>这好像大家高中的时候学过吧，这里我总结下：</p>
<blockquote>
<p>将待转换的十进制数不断地除以2，直到商为零，然后将每次除得的余数倒序拼凑即可。</p>
</blockquote>
</li>
<li>
<p>二进制 &lt;-&gt; 八进制</p>
<p>这个很简单，只需要把数字从0位权开始<strong>三个一组</strong>分开，然后分别转化成八进制数再拼接起来即可。这里提供个表格，方便不想转换的同学查表。</p>
<table>
<thead>
<tr>
<th style="text-align:center">二进制</th>
<th style="text-align:center">八进制</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">000</td>
<td style="text-align:center">0</td>
</tr>
<tr>
<td style="text-align:center">001</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center">010</td>
<td style="text-align:center">2</td>
</tr>
<tr>
<td style="text-align:center">011</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">100</td>
<td style="text-align:center">4</td>
</tr>
<tr>
<td style="text-align:center">101</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">110</td>
<td style="text-align:center">6</td>
</tr>
<tr>
<td style="text-align:center">111</td>
<td style="text-align:center">7</td>
</tr>
</tbody>
</table>
</li>
<li>
<p>二进制 &lt;-&gt; 十六进制</p>
<p>这个就更简单了，只需要记住如下的表格，然后将二进制数从0位权开始<strong>四个一组</strong>分开，分别对应后再重新拼凑即可。</p>
<table>
<thead>
<tr>
<th style="text-align:center">二进制</th>
<th style="text-align:center">十六进制</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">0000</td>
<td style="text-align:center">0</td>
</tr>
<tr>
<td style="text-align:center">0001</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center">0010</td>
<td style="text-align:center">2</td>
</tr>
<tr>
<td style="text-align:center">0011</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">0100</td>
<td style="text-align:center">4</td>
</tr>
<tr>
<td style="text-align:center">0101</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">0110</td>
<td style="text-align:center">6</td>
</tr>
<tr>
<td style="text-align:center">0111</td>
<td style="text-align:center">7</td>
</tr>
<tr>
<td style="text-align:center">1000</td>
<td style="text-align:center">8</td>
</tr>
<tr>
<td style="text-align:center">1001</td>
<td style="text-align:center">9</td>
</tr>
<tr>
<td style="text-align:center">1010</td>
<td style="text-align:center">A</td>
</tr>
<tr>
<td style="text-align:center">1011</td>
<td style="text-align:center">B</td>
</tr>
<tr>
<td style="text-align:center">1100</td>
<td style="text-align:center">C</td>
</tr>
<tr>
<td style="text-align:center">1101</td>
<td style="text-align:center">D</td>
</tr>
<tr>
<td style="text-align:center">1110</td>
<td style="text-align:center">E</td>
</tr>
<tr>
<td style="text-align:center">1111</td>
<td style="text-align:center">F</td>
</tr>
</tbody>
</table>
</li>
</ol>
<h1 id="原码">原码</h1>
<p>在了解这些码之前呢，我们先来了解一下基本知识。</p>
<p>首先，我们要知道，计算机中，存放一个数据最小的单位是bit（位，也称比特），而在TCP/IP协议中，规定<code>1Byte = 8bit</code>，Byte（字节）是最小的容量单位。因此，<strong>一个字节里面就有8个位</strong>。那么如果使用一个字节来表示数字的话，就是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mn>8</mn></msup></mrow><annotation encoding="application/x-tex">2^8</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">8</span></span></span></span></span></span></span></span></span></span></span>个数。那么为了表示数字的符号，我们又规定，一个字节中的<strong>最高位</strong>（也就是最左边的那一位）是<strong>符号位</strong>，符号位为0表示的是<strong>非负数</strong>（记住，是正数和0），1则表示的是<strong>负数</strong>。</p>
<p>原码，实际上就是将十进制数转化成二进制的形式，然后把符号位加上即可。比如说5的原码，先转化为二进制，即<code>101</code>，再填充至7位，即<code>000 0101</code>，然后因为是非负数，符号位为<code>0</code>，那么5的原码就是<code>0000 0101</code>。</p>
<p>明白了吧，是不是觉得特别简单呢？那么-5的原码又是啥呢？</p>
<p>聪明的你一定想到了，就直接把符号位变为<code>1</code>就行啦，即<code>1000 0101</code>。</p>
<p>简直完美啊，如此简洁地表达了数字在存储器中的表示方式。直观形象又好记！</p>
<p>But！现在该说但是了。请问5和-5相加等于多少呢？</p>
<p>0啊！当然是0！这难道还要思考吗？？</p>
<p>是的，没错，但是你用两个数的原码加起来看看等于几？</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0000</mn><mo separator="true">,</mo><mn>0101</mn><mo>+</mo><mn>1000</mn><mo separator="true">,</mo><mn>0101</mn><mo>=</mo><mn>1000</mn><mo separator="true">,</mo><mn>1010</mn></mrow><annotation encoding="application/x-tex">0000,0101 + 1000,0101 = 1000,1010
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">0</span><span class="mord">1</span><span class="mord">0</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">0</span><span class="mord">1</span><span class="mord">0</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">1</span><span class="mord">0</span></span></span></span></span></p>
<p>咦？咋就不等于0了呢……</p>
<p>没错，问题就在这。如果用这种所谓的直观的形式去表达，既有悖于我们的常识，又不方便计算机的电路设计，于是我们的先人们开始了探索。</p>
<h1 id="反码">反码</h1>
<p>我们从上面的例子了解到，负数在表达的时候，不能这么图方便，不然可能会造成一些冲突和错误。先人们就开始折腾。结果弄出来反码这个东西。</p>
<p>我们说了，只是负数的表达除了问题，所以<strong>正数无论是原码，反码还是后面我们讲的补码，都是不变的</strong>。要变的只有负数。</p>
<p>负数原码转反码的方法很简单，符号位单独<strong>不变</strong>，只需要把其他的<strong>按位取反</strong>即可。什么叫按位取反呢，说成人话，就是0变1，1变0。还是拿刚刚的-5作为栗子。-5的原码为</p>
<blockquote>
<p>1000 0101</p>
</blockquote>
<p>那么转化为反码，符号位不变，其余按位取反：</p>
<blockquote>
<p>1111 1010</p>
</blockquote>
<p>懂了吧，那么这样5和-5相加会得到什么呢？</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0000</mn><mo separator="true">,</mo><mn>0101</mn><mo>+</mo><mn>1111</mn><mo separator="true">,</mo><mn>1010</mn><mo>=</mo><mn>1111</mn><mo separator="true">,</mo><mn>1111</mn></mrow><annotation encoding="application/x-tex">0000,0101 + 1111,1010 = 1111,1111
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">0</span><span class="mord">1</span><span class="mord">0</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">1</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span></span></span></span></span></p>
<p>我们发现，得到了一个8bit能表示的最大的值。这个路子能否成功，就看临门一脚了。距离成功仅一步之遥。</p>
<h1 id="补码">补码</h1>
<p>这个“临门一脚”就交给补码啦。补码的出现，相反数相加不为0的情况才被彻底解决。那么补码又是个啥东东呢？</p>
<p>正数的补码还是原码，这个刚刚说过了。而负数的补码，则是在反码的基础上加个1。可为啥是1呢？上面那个反码的例子，我相信大家是有些想法了，如果给<code>1111 1111</code>这个数加个1，那么等于多少呢？</p>
<p>答案是<code>1 0000 0000</code>。</p>
<p>又的小伙伴可能会抬杠了，那还是不等于0呀。我们注意观察，这个数已经达到9位了，最高位已经<strong>溢出</strong>一个Byte，那么对于一个Byte所表示的数字，计算机可以将最高位直接<strong>舍弃</strong>，bingo！不就变成<code>0000 0000</code>了吗？</p>
<p>是不是很奇妙呢？不得不说，先人们着实厉害呀，在这里向他们致敬！</p>
<p>另外，还要提醒一点，就是<strong>补码的补码就是原码</strong>，至于为什么大家可以回去自己试试，这里就不多赘述咯('')</p>
<p>最后，在这篇文章结束前，我还想提醒一句：**正数是三码归一！！**别到时候别人给你一个正数叫你转换，你还按位取反啥啥啥的，那样就丢人啦！</p>
<p>今天的博客就到此结束啦，如果你喜欢笔者的文章，记得点个赞哦(≧∇≦)ﾉ</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[C语言之printf函数的用法]]></title>
        <id>https://harriswilde.github.io/post/CPrintf</id>
        <link href="https://harriswilde.github.io/post/CPrintf">
        </link>
        <updated>2019-10-13T13:11:27.000Z</updated>
        <content type="html"><![CDATA[<p>printf，即<strong>格式化输出</strong>，是C语言中常用的输出函数。本节内容咱们就来讲讲关于这个函数的一些用法。</p>
<p>​		我们在《<a href="https://harriswilde.github.io/post/FirstCProgram">第一个C语言程序</a>》中有粗略地提到了printf函数，小伙伴们应该也对这个函数有了一个大致的了解，大概知道了是用来<strong>输出数据</strong>用的。但是，我们既然说它是个函数，那么就应该有挺多丰富的用法等着我们来发掘。那我们就一起来看看到底有哪些方法。</p>
<h1 id="初窥门径">初窥门径</h1>
<p>​		我们还是从那个最简单的C语言程序开始：</p>
<pre><code class="language-c">#include &lt;stdio.h&gt;
int main(void)
{
    printf(&quot;Hello, world!\n&quot;);
    return 0;
}
</code></pre>
<p>printf函数有个括号，那么这个函数的<strong>所有参数</strong>都是放在这个括号里面的。什么意思呢，printf这个函数就像是一个工具，这个工具有许许多多的功能。如何去设置这个工具，让它达到我们想要的效果，就只需要把我们的想法写在括号里就完事儿啦。</p>
<p>​		但是呢，这个工具并没有搭载目前最新最火的人工智能，比如你这么写<br>
<code>printf(让&quot;Hello, world!\n&quot;这个东西给劳资居中)</code>，这样肯定不行，因为printf看不懂呀。只有写出它看得懂的东西，它才会听话，乖乖给我们工作。你要是说些它听不懂的，那它就直接罢工不干啦，你就跟老板解释去吧！(printf：别说人话了，我听不懂)</p>
<h1 id="正式开始">正式开始</h1>
<p>​		既然想要函数听懂我们在说什么，就要遵循它的方式。那么我们先来了解下printf的通式：</p>
<p><code>printf(输出框架*格式化设置,附加参数)</code></p>
<h2 id="参数解析">参数解析</h2>
<ul>
<li>
<p>输出框架</p>
<p>​		我们上面那个<code>printf(&quot;Hello, world!\n&quot;)</code>中，就只用到了<strong>输出框架</strong>这一个参数。有的小伙伴可能会问了，我们看到的全部内容不就是引号里面的吗？咋叫框架呢？</p>
<p>​		其实不然，我们还只用了一个参数，别急，后面大家就知道啦。</p>
</li>
<li>
<p>格式化设置</p>
<p>​		这个<strong>星号</strong>其实是没有的，这里只是告诉大家这两个参数之间是<strong>连接起来</strong>的，<strong>不</strong>需要空格。</p>
<p>​		此处的语法通式为：<br>
<code>%[标志] [宽度] [精度] [长度修饰符] 转换字符</code></p>
<p>​		其中，带中括号的是<strong>可选参数</strong>，<strong>不</strong>带的是<strong>必选参数</strong>。</p>
<ol>
<li>
<p>转换字符：</p>
<table>
<thead>
<tr>
<th style="text-align:center">字符</th>
<th style="text-align:left">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">c</td>
<td style="text-align:left">char；字符</td>
</tr>
<tr>
<td style="text-align:center">d</td>
<td style="text-align:left">int；带符号的十进制整数</td>
</tr>
<tr>
<td style="text-align:center">i</td>
<td style="text-align:left">同上</td>
</tr>
<tr>
<td style="text-align:center">e</td>
<td style="text-align:left">double；以指数形式输出单、双精度浮点数</td>
</tr>
<tr>
<td style="text-align:center">E</td>
<td style="text-align:left">同上</td>
</tr>
<tr>
<td style="text-align:center">f</td>
<td style="text-align:left">double；以小数的形式输出单、双精度浮点数（指数显示小写e）</td>
</tr>
<tr>
<td style="text-align:center">g</td>
<td style="text-align:left">double；以%f或%e中较短的一种方式输出单、双精度浮点数（指数显示小写e）</td>
</tr>
<tr>
<td style="text-align:center">G</td>
<td style="text-align:left">同上，指数显示大写E</td>
</tr>
<tr>
<td style="text-align:center">o</td>
<td style="text-align:left">unsigned int；无符号八进制（无前导0）</td>
</tr>
<tr>
<td style="text-align:center">s</td>
<td style="text-align:left">char；字符串</td>
</tr>
<tr>
<td style="text-align:center">u</td>
<td style="text-align:left">int；无符号十进制</td>
</tr>
<tr>
<td style="text-align:center">x</td>
<td style="text-align:left">unsigned int；无符号十六进制（无前导0x）</td>
</tr>
<tr>
<td style="text-align:center">X</td>
<td style="text-align:left">同上（无前导0X）</td>
</tr>
<tr>
<td style="text-align:center">p</td>
<td style="text-align:left">void；指针值</td>
</tr>
<tr>
<td style="text-align:center">n</td>
<td style="text-align:left">int；用于存放已写字符的个数到变量，不用于输出</td>
</tr>
<tr>
<td style="text-align:center">%</td>
<td style="text-align:left">不进行参数转换；%本身</td>
</tr>
</tbody>
</table>
</li>
<li>
<p>标志：</p>
<table>
<thead>
<tr>
<th style="text-align:center">标志</th>
<th style="text-align:left">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">-</td>
<td style="text-align:left">指定被转换的参数在其字段内左对齐（默认是右对齐）</td>
</tr>
<tr>
<td style="text-align:center">+</td>
<td style="text-align:left">给数加上正负号</td>
</tr>
<tr>
<td style="text-align:center">[空格]</td>
<td style="text-align:left">若非负数则加上空格</td>
</tr>
<tr>
<td style="text-align:center">0</td>
<td style="text-align:left">对于数值转换，当输出长度小于字段宽度时，添加前导0补充</td>
</tr>
<tr>
<td style="text-align:center">#</td>
<td style="text-align:left">指定另一种输出方式<br>1. 若转换字符为o，则第一个数为0<br>2. 若转换字符为x或X，则在输出的非零值前加0x或0X<br>3. 对于转换字符为e、E、f、g或G，则输出的数总包含一个小数点。<br>另外，对于转换字符g或G，还将尾部无意义的0保留</td>
</tr>
</tbody>
</table>
</li>
<li>
<p>宽度：</p>
<p>转换后的参数输出宽度<strong>至少</strong>达到这个值，若不足则在<strong>左边或右边</strong>填补空格或者0。具体看标志的设置，<strong>若无，默认左边填充空格。</strong></p>
</li>
<li>
<p>精度：</p>
<p>这里要声明一下，只有这个参数前面是要加点号&quot;<strong>.</strong>&quot;来分隔的，</p>
<p>对于<strong>字符串</strong>，它指定打印的字符的<strong>最大个数</strong>。</p>
<p>对于<strong>整数</strong>，它指定打印字符的<strong>位数</strong>，必要时加0来填补。</p>
<p>对于<strong>转换字符为e、E或f</strong>，它指定打印的<strong>小数点后</strong>的数字位数。</p>
<p>对于<strong>转换字符为g或G</strong>，它指定打印的<strong>有效数字</strong>位数。</p>
</li>
<li>
<p>长度修饰符：</p>
<table>
<thead>
<tr>
<th style="text-align:center">修饰符</th>
<th style="text-align:left">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">hh</td>
<td style="text-align:left">按signed char或unsigned char类型输出</td>
</tr>
<tr>
<td style="text-align:center">h</td>
<td style="text-align:left">按short或unsignedshort输出</td>
</tr>
<tr>
<td style="text-align:center">l</td>
<td style="text-align:left">按long或unsigned long输出</td>
</tr>
<tr>
<td style="text-align:center">ll</td>
<td style="text-align:left">按long long或者unsigned long long输出</td>
</tr>
<tr>
<td style="text-align:center">L</td>
<td style="text-align:left">按long double类型输出</td>
</tr>
</tbody>
</table>
</li>
</ol>
</li>
<li>
<p>附加参数</p>
<p>所谓附加参数，笔者也不做过多解释。假设我有一个变量c，在<code>int c=3</code>之后，我想要输出c的值，该怎么办呢？</p>
<p>有的小伙伴很聪明，立马说，Harris！我知道，这样不就行了：</p>
<pre><code class="language-c">#include &lt;stdio.h&gt;
int main(void)
{
    int c=3;
    printf(&quot;C=3\n&quot;);
    return 0;
}
</code></pre>
<p>是的，这样做没错。我们的确正确输出了整型变量c的值。但是，我们写程序，很多时候时为了方便<strong>不懂程序的人</strong>来使用的。我们知道c的值，那是因为我们看得懂代码。</p>
<p>如果我要你输出刚才用户输入的值，你怎么办呢？那么这个时候，<strong>附加参数</strong>就大显神威了。</p>
<pre><code class="language-c">#include &lt;stdio.h&gt;
int main(void)
{
    int c=3;//这里假定用户已经输入了值
    printf(&quot;C的值为%d&quot;,c);
    return 0;
}
</code></pre>
<p>看到了吧。这里就把<strong>动态的变量c</strong>嵌入到语句里面输出了。</p>
<p>看到这里我相信小伙伴们应该也明白了为啥我之前说引号里面的是<strong>框架</strong>了。这就是所谓的<strong>格式化输出</strong>，是不是有点只可意会不可言传的感觉呢？</p>
<p>今天的内容基本就到这里结束啦。不过Harris在这里给大家留个悬念，大家可以自己回去自己的编译器上实验一下，看看能不能理解输出的结果？具体原理以后会讲，所以不理解没关系，学好上面的内容就很棒啦！</p>
<pre><code class="language-c">#include &lt;stdio.h&gt;
int main(void)
{
    char C = 'c';
    printf(&quot;%c=%d&quot;,C,C);
    return 0;
}
</code></pre>
</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[C语言的一些基本知识]]></title>
        <id>https://harriswilde.github.io/post/CPreStudy</id>
        <link href="https://harriswilde.github.io/post/CPreStudy">
        </link>
        <updated>2019-10-13T07:08:46.000Z</updated>
        <content type="html"><![CDATA[<p>在正式开始学习C语言之前，我们先带大家来熟悉一下C语言的一些基本知识。只有熟悉了这些基本知识，后期的学习和实践中才不会因为一些简单的问题而卡格。</p>
<h1 id="编译型语言和解释性语言的区别">编译型语言和解释性语言的区别</h1>
<p>​		我们之前说过，C语言是一种编译型语言，而像Python，Ruby这种就属于解释性语言。</p>
<p>​		所谓编译型语言，就是将写好的代码先转化为<strong>汇编语言</strong>，然后再由<strong>编译器</strong>转化为<strong>机器码</strong>，最后交给CPU执行。而解释型语言则是先把写好的代码转化为<strong>字节码</strong>，然后交给<strong>解释器</strong>，最后由CPU来执行。也就是说，编译型语言是一次性翻译完，然后再执行，解释型是一边翻译一边运行。</p>
<p>​		但是现在的语言，编译型和解释型的概念已经越来越模糊。现在已经不太适合用单一的方式来归类一些语言，上述仅供了解即可。</p>
<h1 id="字符串中的转义字符">字符串中的转义字符</h1>
<p>​		C语言里，有一些用来<strong>表示特定含义</strong>的标识符，叫做转义字符。上一篇文章也提到了&quot;\n&quot;这个转义字符，下面列出详细的列表供大家学习和参考。不用一次性全部记住，多查表多实践，自然就会信手拈来啦！</p>
<table>
<thead>
<tr>
<th style="text-align:center">转义字符</th>
<th style="text-align:center">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">\a</td>
<td style="text-align:center">响铃</td>
</tr>
<tr>
<td style="text-align:center">\b</td>
<td style="text-align:center">退格，将当前位置移动到前一列</td>
</tr>
<tr>
<td style="text-align:center">\f</td>
<td style="text-align:center">换页，将当前位置移动到下页开头</td>
</tr>
<tr>
<td style="text-align:center">\n</td>
<td style="text-align:center">换行，将当前位置移动到下一行开头</td>
</tr>
<tr>
<td style="text-align:center">\r</td>
<td style="text-align:center">回车，将当前位置移动到本行开头</td>
</tr>
<tr>
<td style="text-align:center">\t</td>
<td style="text-align:center">水平制表，跳到下一个Tab位置</td>
</tr>
<tr>
<td style="text-align:center">\v</td>
<td style="text-align:center">垂直制表</td>
</tr>
<tr>
<td style="text-align:center">\\</td>
<td style="text-align:center">表示反斜杠本身</td>
</tr>
<tr>
<td style="text-align:center">\'</td>
<td style="text-align:center">表示单引号</td>
</tr>
<tr>
<td style="text-align:center">\&quot;</td>
<td style="text-align:center">表示双引号</td>
</tr>
<tr>
<td style="text-align:center">\?</td>
<td style="text-align:center">表示问号</td>
</tr>
<tr>
<td style="text-align:center">\0</td>
<td style="text-align:center">表示空字符(Null)</td>
</tr>
<tr>
<td style="text-align:center">\ddd</td>
<td style="text-align:center">1~3位八进制数所代表的任意字符</td>
</tr>
<tr>
<td style="text-align:center">\xhh</td>
<td style="text-align:center">1~2位十六进制所代表的任意字符</td>
</tr>
</tbody>
</table>
<h1 id="c语言中的保留关键字">C语言中的保留关键字</h1>
<p>​		在所有语言中，都会有自己的<strong>保留字</strong>。这些保留字用于<strong>构建语言的语法</strong>，从而<strong>不能</strong>被用户自定义来使用。其实这些保留字后面学习的时候都会慢慢接触，但是在语法还没有学完之前，笔者还是来总结下这些保留字，方便大家日后的查询。</p>
<p>ANSIC标准中的保留字：</p>
<blockquote>
<p>auto, break, case, char, const, continue, default, do, double, else, enum, extern, float, for, goto, if, int, long, register, return, short, signed, sizeof, static, struct, switch, typedef, union, unsigned, void, volatile, while</p>
</blockquote>
<p>C99标准中增加的：</p>
<blockquote>
<p>inline, restrict, _Bool, _Complex, _Imaginary</p>
</blockquote>
<p>C11标准中增加：</p>
<blockquote>
<p>_Alignas, _Alignof, _Atomic, _Static_assert, _Noreturn, _Thread_local, _Generic</p>
</blockquote>
<h1 id="c语言中的一些小知识">C语言中的一些小知识</h1>
<h2 id="c语言基本数据类型">C语言基本数据类型</h2>
<blockquote>
<ul>
<li>char —— 字符型，占用一个字节</li>
<li>int —— 整型，通常反应了所用机器中整数的自然长度</li>
<li>float —— 单精度浮点型</li>
<li>double —— 双精度浮点型</li>
</ul>
</blockquote>
<h2 id="定义变量的格式">定义变量的格式</h2>
<p><code>数据类型 变量名</code></p>
<p>例如：<code>int a</code></p>
<p>即定义变量a为整型变量</p>
<h2 id="注释">注释</h2>
<pre><code class="language-c">//单行注释
</code></pre>
<pre><code class="language-c">/*
多
行
注
释
*/
</code></pre>
<hr>
<p>​		这期文章干货比较多，但都是一些常识性的东西，几乎没有理解难度。大家一次性记不下来没关系，多翻回来看看用着用着就记得啦！下期再见咯( •̀ ω •́ )y</p>
]]></content>
    </entry>
</feed>